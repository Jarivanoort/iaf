/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js lazy recursive":
/*!***********************************!*\
  !*** ./js/ lazy namespace object ***!
  \***********************************/
/***/ ((module) => {

eval("function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./js lazy recursive\";\nmodule.exports = webpackEmptyAsyncContext;\n\n//# sourceURL=webpack://gui/./js/_lazy_namespace_object?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery-exposed.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var metismenu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! metismenu */ \"./node_modules/metismenu/dist/metisMenu.js\");\n/* harmony import */ var metismenu__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(metismenu__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! angular */ \"./node_modules/angular/index.js\");\n/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var angular_animate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! angular-animate */ \"./node_modules/angular-animate/index.js\");\n/* harmony import */ var angular_animate__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(angular_animate__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var angular_aria__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! angular-aria */ \"./node_modules/angular-aria/index.js\");\n/* harmony import */ var angular_aria__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(angular_aria__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var angular_cookies__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! angular-cookies */ \"./node_modules/angular-cookies/index.js\");\n/* harmony import */ var angular_cookies__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(angular_cookies__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var angular_loader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! angular-loader */ \"./node_modules/angular-loader/angular-loader.js\");\n/* harmony import */ var angular_loader__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(angular_loader__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var angular_messages__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! angular-messages */ \"./node_modules/angular-messages/index.js\");\n/* harmony import */ var angular_messages__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(angular_messages__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var angular_mocks__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! angular-mocks */ \"./node_modules/angular-mocks/angular-mocks.js\");\n/* harmony import */ var angular_mocks__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(angular_mocks__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var angular_parse_ext__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! angular-parse-ext */ \"./node_modules/angular-parse-ext/index.js\");\n/* harmony import */ var angular_parse_ext__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(angular_parse_ext__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var angular_resource__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! angular-resource */ \"./node_modules/angular-resource/index.js\");\n/* harmony import */ var angular_resource__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(angular_resource__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var angular_route__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! angular-route */ \"./node_modules/angular-route/index.js\");\n/* harmony import */ var angular_route__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(angular_route__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var angular_sanitize__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! angular-sanitize */ \"./node_modules/angular-sanitize/index.js\");\n/* harmony import */ var angular_sanitize__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(angular_sanitize__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var angular_touch__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! angular-touch */ \"./node_modules/angular-touch/index.js\");\n/* harmony import */ var angular_touch__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(angular_touch__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var angular_ui_bootstrap__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! angular-ui-bootstrap */ \"./node_modules/angular-ui-bootstrap/index.js\");\n/* harmony import */ var angular_ui_bootstrap__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(angular_ui_bootstrap__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var angular_ui_router__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! angular-ui-router */ \"./node_modules/angular-ui-router/lib-esm/index.js\");\n/* harmony import */ var oclazyload__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! oclazyload */ \"./node_modules/oclazyload/dist/ocLazyLoad.js\");\n/* harmony import */ var oclazyload__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(oclazyload__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var ng_idle_angular_idle__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ng-idle/angular-idle */ \"./node_modules/ng-idle/angular-idle.js\");\n/* harmony import */ var ng_idle_angular_idle__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(ng_idle_angular_idle__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var angular_ladda__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! angular-ladda */ \"./node_modules/angular-ladda/dist/angular-ladda.js\");\n/* harmony import */ var angular_ladda__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(angular_ladda__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var angularjs_toaster__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! angularjs-toaster */ \"./node_modules/angularjs-toaster/index.js\");\n/* harmony import */ var angularjs_toaster__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(angularjs_toaster__WEBPACK_IMPORTED_MODULE_19__);\n/* harmony import */ var bootstrap_dist_css_bootstrap_css__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! bootstrap/dist/css/bootstrap.css */ \"./node_modules/bootstrap/dist/css/bootstrap.css\");\n/* harmony import */ var font_awesome_scss_font_awesome_scss__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! font-awesome/scss/font-awesome.scss */ \"./node_modules/font-awesome/scss/font-awesome.scss\");\n/* harmony import */ var font_awesome_fonts_fontawesome_webfont_svg__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! font-awesome/fonts/fontawesome-webfont.svg */ \"./node_modules/font-awesome/fonts/fontawesome-webfont.svg\");\n/* harmony import */ var font_awesome_fonts_fontawesome_webfont_eot__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! font-awesome/fonts/fontawesome-webfont.eot */ \"./node_modules/font-awesome/fonts/fontawesome-webfont.eot\");\n/* harmony import */ var font_awesome_fonts_fontawesome_webfont_ttf__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! font-awesome/fonts/fontawesome-webfont.ttf */ \"./node_modules/font-awesome/fonts/fontawesome-webfont.ttf\");\n/* harmony import */ var font_awesome_fonts_fontawesome_webfont_woff__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! font-awesome/fonts/fontawesome-webfont.woff */ \"./node_modules/font-awesome/fonts/fontawesome-webfont.woff\");\n/* harmony import */ var font_awesome_fonts_fontawesome_webfont_woff2__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! font-awesome/fonts/fontawesome-webfont.woff2 */ \"./node_modules/font-awesome/fonts/fontawesome-webfont.woff2\");\n/* harmony import */ var _css_animate_css__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./css/animate.css */ \"./css/animate.css\");\n/* harmony import */ var sweetalert_lib_sweet_alert_css__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! sweetalert/lib/sweet-alert.css */ \"./node_modules/sweetalert/lib/sweet-alert.css\");\n/* harmony import */ var _css_plugins_iCheck_custom_css__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./css/plugins/iCheck/custom.css */ \"./css/plugins/iCheck/custom.css\");\n/* harmony import */ var ladda_dist_ladda_themeless_min_css__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ladda/dist/ladda-themeless.min.css */ \"./node_modules/ladda/dist/ladda-themeless.min.css\");\n/* harmony import */ var prismjs_themes_prism_css__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! prismjs/themes/prism.css */ \"./node_modules/prismjs/themes/prism.css\");\n/* harmony import */ var angularjs_toaster_toaster_min_css__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! angularjs-toaster/toaster.min.css */ \"./node_modules/angularjs-toaster/toaster.min.css\");\n/* harmony import */ var _css_style_css__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./css/style.css */ \"./css/style.css\");\n/* harmony import */ var _js_main__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./js/main */ \"./js/main.js\");\n/* harmony import */ var _js_app__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./js/app */ \"./js/app.js\");\n/* harmony import */ var _js_config__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./js/config */ \"./js/config.js\");\n/* harmony import */ var _js_config__WEBPACK_IMPORTED_MODULE_36___default = /*#__PURE__*/__webpack_require__.n(_js_config__WEBPACK_IMPORTED_MODULE_36__);\n/* harmony import */ var _js_services__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./js/services */ \"./js/services.js\");\n/* harmony import */ var _js_directives__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./js/directives */ \"./js/directives.js\");\n/* harmony import */ var _js_directives__WEBPACK_IMPORTED_MODULE_38___default = /*#__PURE__*/__webpack_require__.n(_js_directives__WEBPACK_IMPORTED_MODULE_38__);\n/* harmony import */ var _js_controllers__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./js/controllers */ \"./js/controllers.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://gui/./index.js?");

/***/ }),

/***/ "./js/app.js":
/*!*******************!*\
  !*** ./js/app.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _loaderModule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loaderModule */ \"./js/loaderModule.js\");\n\n(function () {\n  var server; //Try and see if serverurl has been defined, if not try to deduct from local url;\n  try {\n    server = serverurl;\n  } catch (e) {\n    var path = window.location.pathname;\n    if (path.indexOf(\"/iaf/gui\") >= 0) path = path.substr(0, path.indexOf(\"/iaf/gui\") + 1);else if (path.indexOf(\"/\", 1) >= 0) path = path.substr(0, path.indexOf(\"/\", 1) + 1);\n    server = path;\n  }\n  angular.module('iaf.beheerconsole', ['ngCookies',\n  // Angular Cookies\n  'ui.router',\n  // Routing\n  _loaderModule__WEBPACK_IMPORTED_MODULE_0__.loaderModule.name,\n  // 'oc.lazyLoad',                  // ocLazyLoad\n  'ui.bootstrap',\n  // Ui Bootstrap\n  'ngIdle',\n  // Idle timer\n  'ngSanitize',\n  // ngSanitize\n  'angular-ladda',\n  // Ladda\n  'toaster' // Toastr\n  ]).constant(\"appConstants\", {\n    //Configure these in the server AppConstants!!!\n    //The settings here are defaults and will be overwritten upon set in any .properties file.\n\n    //Server to connect to, defaults to local server.\n    \"server\": server,\n    //How often the interactive frontend should poll the IAF API for new data\n    \"console.pollerInterval\": 30000,\n    //How often the interactive frontend should poll during IDLE state\n    \"console.idle.pollerInterval\": 180000,\n    //After x minutes the app goes into 'idle' state (use 0 to disable)\n    \"console.idle.time\": 300,\n    //After x minutes the user will be forcefully logged out\n    \"console.idle.timeout\": 0,\n    //Time format in which to display the time and date.\n    \"console.dateFormat\": \"yyyy-MM-dd HH:mm:ss\",\n    //These will automatically be updated.\n    \"timeOffset\": 0,\n    \"init\": -1,\n    getString: function getString(variable) {\n      return this[variable];\n    },\n    getBoolean: function getBoolean(variable, dfault) {\n      if (this[variable] != undefined) return this[variable] === \"true\";\n      return dfault;\n    }\n  });\n  console.timeEnd(\"startup\");\n})();\n\n//# sourceURL=webpack://gui/./js/app.js?");

/***/ }),

/***/ "./js/config.js":
/*!**********************!*\
  !*** ./js/config.js ***!
  \**********************/
/***/ (() => {

eval("angular.module('iaf.beheerconsole').config(['$cookiesProvider', '$locationProvider', '$stateProvider', '$urlRouterProvider', /*'$ocLazyLoadProvider',*/'IdleProvider', 'KeepaliveProvider', 'appConstants', 'laddaProvider', '$anchorScrollProvider', function config($cookiesProvider, $locationProvider, $stateProvider, $urlRouterProvider, /*$ocLazyLoadProvider,*/IdleProvider, KeepaliveProvider, appConstants, laddaProvider, $anchorScrollProvider) {\n  if (appConstants[\"console.idle.time\"] && appConstants[\"console.idle.time\"] > 0) {\n    IdleProvider.idle(appConstants[\"console.idle.time\"]);\n    IdleProvider.timeout(appConstants[\"console.idle.timeout\"]);\n  }\n  $urlRouterProvider.otherwise(\"/\");\n  $locationProvider.html5Mode(false);\n  $anchorScrollProvider.disableAutoScrolling();\n  $cookiesProvider.defaults.secure = location.protocol == \"https:\";\n  $cookiesProvider.defaults.samesite = 'strict';\n\n  /*$ocLazyLoadProvider.config({\n  \t/!*modules: [\n  \t{\n  \t\tname: 'datatables',\n  \t\tserie: true,\n  \t\tfiles: [\n  \t\t\t'js/plugins/dataTables/datatables.v1.10.20.min.js',\n  \t\t\t'css/plugins/dataTables/datatables.v1.10.20.min.css',\n  \t\t\t'js/plugins/dataTables/angular-datatables.v0.6.2.min.js',\n  \t\t\t'js/plugins/dataTables/angular-datatables.buttons.min.js'\n  \t\t]\n  \t}, {\n  \t\tserie: true,\n  \t\tname: 'chartjs',\n  \t\tfiles: ['js/plugins/chartJs/Chart.min.js', 'js/plugins/chartJs/angular-chart.min.js', 'css/plugins/chartJs/Chart.min.css']\n  \t},\n  \t{\n  \t\tname: 'mermaid',\n  \t\tserie: true,\n  \t\tfiles: [\n  \t\t\t'js/plugins/mermaid/mermaid.min.js',\n  \t\t\t'js/plugins/mermaid/ng-mermaid.js',\n  \t\t]\n  \t}],*!/\n  \t// Set to true if you want to see what and when is dynamically loaded\n  \tdebug: true\n  });*/\n\n  laddaProvider.setOption({\n    style: 'expand-right'\n  });\n  $stateProvider.state('login', {\n    url: \"/login\",\n    templateUrl: \"views/login.html\",\n    controller: 'LoginCtrl',\n    data: {\n      pageTitle: 'Login'\n    }\n  }).state('logout', {\n    url: \"/logout\",\n    controller: 'LogoutCtrl',\n    data: {\n      pageTitle: 'Logout'\n    }\n  }).state('pages', {\n    \"abstract\": true,\n    controller: [\"$scope\", \"authService\", \"$location\", \"$state\", function controller($scope, authService, $location, $state) {\n      authService.loggedin(); //Check if the user is logged in.\n      $scope.monitoring = false;\n      $scope.config_database = false;\n      angular.element(\".main\").show();\n      angular.element(\".loading\").remove();\n    }],\n    templateUrl: \"views/common/content.html\"\n  }).state('pages.status', {\n    url: \"/status?configuration&filter&search\",\n    templateUrl: \"views/ShowConfigurationStatus.html\",\n    controller: 'StatusCtrl as status',\n    reloadOnSearch: false,\n    data: {\n      pageTitle: 'Adapter Status',\n      breadcrumbs: 'Adapter > Status'\n    },\n    params: {\n      configuration: {\n        value: 'All',\n        squash: true\n      },\n      filter: {\n        value: 'started+stopped+warning',\n        squash: true\n      },\n      search: {\n        value: '',\n        squash: true\n      },\n      adapter: {\n        value: '',\n        squash: true\n      }\n    }\n    //parent: \"pages\"\n  }).state('pages.adapter', {\n    url: \"/adapter\",\n    templateUrl: \"views/ShowConfigurationStatus.html\"\n  }).state('pages.adapterstatistics', {\n    url: \"/adapter/:name/statistics\",\n    templateUrl: \"views/adapter_statistics.html\",\n    data: {\n      pageTitle: 'Adapter',\n      breadcrumbs: 'Adapter > Statistics'\n    },\n    params: {\n      id: 0\n    },\n    resolve: {\n      loadPlugin: [\"lazyLoader\", function loadPlugin(lazyLoader) {\n        return lazyLoader.load('angular-chart.js');\n      }]\n    }\n  }).state('pages.storage', {\n    \"abstract\": true,\n    url: \"/adapters/:adapter/:storageSource/:storageSourceName/\",\n    template: \"<div ui-view ng-controller='StorageBaseCtrl'></div>\",\n    controller: [\"$state\", function controller($state) {\n      $state.current.data.pageTitle = $state.params.processState + \" List\";\n      $state.current.data.breadcrumbs = \"Adapter > \" + ($state.params.storageSource == 'pipes' ? \"Pipes > \" + $state.params.storageSourceName + \" > \" : \"\") + $state.params.processState + \" List\";\n    }],\n    params: {\n      adapter: {\n        value: '',\n        squash: true\n      },\n      storageSourceName: {\n        value: '',\n        squash: true\n      },\n      processState: {\n        value: '',\n        squash: true\n      },\n      storageSource: {\n        value: '',\n        squash: true\n      }\n    },\n    data: {\n      pageTitle: '',\n      breadcrumbs: ''\n    }\n  }).state('pages.storage.list', {\n    url: \"stores/:processState\",\n    templateUrl: \"views/txstorage/adapter_storage_list.html\",\n    resolve: {\n      loadPlugin: [\"lazyLoader\", function loadPlugin(lazyLoader) {\n        return lazyLoader.load('angular-datatables');\n      }]\n    }\n  }).state('pages.storage.view', {\n    url: \"stores/:processState/messages/:messageId\",\n    templateUrl: \"views/txstorage/adapter_storage_view.html\",\n    params: {\n      messageId: {\n        value: '',\n        squash: true\n      }\n    },\n    controller: [\"$state\", function controller($state) {\n      $state.current.data.breadcrumbs = \"Adapter > \" + ($state.params.storageSource == 'pipes' ? \"Pipes > \" + $state.params.storageSourceName + \" > \" : \"\") + $state.params.processState + \" List > View Message \" + $state.params.messageId;\n    }]\n  }).state('pages.notifications', {\n    url: \"/notifications\",\n    templateUrl: \"views/notifications.html\",\n    data: {\n      pageTitle: 'Notifications',\n      breadcrumbs: 'Notifications'\n    },\n    params: {\n      id: 0\n    },\n    controller: 'NotificationsCtrl'\n  }).state('pages.configuration', {\n    url: \"/configurations?name&loaded\",\n    templateUrl: \"views/ShowConfiguration.html\",\n    reloadOnSearch: false,\n    data: {\n      pageTitle: 'Configurations',\n      breadcrumbs: 'Configurations > Show'\n    },\n    params: {\n      name: {\n        value: 'All',\n        squash: true\n      },\n      loaded: {\n        value: '',\n        squash: true\n      }\n    }\n  }).state('pages.upload_configuration', {\n    url: \"/configurations/upload\",\n    templateUrl: \"views/ManageConfigurationsUpload.html\",\n    data: {\n      pageTitle: 'Manage Configurations',\n      breadcrumbs: 'Configurations > Upload'\n    }\n  }).state('pages.manage_configurations', {\n    url: \"/configurations/manage\",\n    templateUrl: \"views/ManageConfigurations.html\",\n    data: {\n      pageTitle: 'Manage Configurations',\n      breadcrumbs: 'Configurations > Manage'\n    }\n  }).state('pages.manage_configuration_details', {\n    url: \"/configurations/manage/:name\",\n    templateUrl: \"views/ManageConfigurationDetails.html\",\n    data: {\n      pageTitle: 'Manage Configurations',\n      breadcrumbs: 'Configurations > Manage'\n    },\n    params: {\n      name: \"\"\n    },\n    controller: [\"$state\", function controller($state) {\n      if ($state.params && $state.params.name && $state.params.name != \"\") $state.$current.data.breadcrumbs = \"Configurations > Manage > \" + $state.params.name;else $state.go(\"pages.manage_configurations\");\n    }]\n  }).state('pages.logging_show', {\n    url: \"/logging?directory&file\",\n    templateUrl: \"views/ShowLogging.html\",\n    data: {\n      pageTitle: 'Logging',\n      breadcrumbs: 'Logging > Log Files'\n    },\n    params: {\n      directory: null,\n      file: null\n    }\n  }).state('pages.logging_manage', {\n    url: \"/logging/settings\",\n    templateUrl: \"views/ManageLogging.html\",\n    data: {\n      pageTitle: 'Logging',\n      breadcrumbs: 'Logging > Log Settings'\n    }\n  }).state('pages.send_message', {\n    url: \"/jms/send-message\",\n    templateUrl: \"views/SendJmsMessage.html\",\n    data: {\n      pageTitle: 'Send JMS Message',\n      breadcrumbs: 'JMS > Send Message'\n    }\n  }).state('pages.browse_queue', {\n    url: \"/jms/browse-queue\",\n    templateUrl: \"views/BrowseJmsQueue.html\",\n    data: {\n      pageTitle: 'Browse JMS Queue',\n      breadcrumbs: 'JMS > Browse Queue'\n    }\n  }).state('pages.test_pipeline', {\n    url: \"/test-pipeline\",\n    templateUrl: \"views/TestPipeline.html\",\n    data: {\n      pageTitle: 'Test a PipeLine',\n      breadcrumbs: 'Testing > Test a PipeLine'\n    }\n  }).state('pages.test_servicelistener', {\n    url: \"/test-serviceListener\",\n    templateUrl: \"views/TestServiceListener.html\",\n    data: {\n      pageTitle: 'Test a ServiceListener',\n      breadcrumbs: 'Testing > Test a ServiceListener'\n    }\n  }).state('pages.webservices', {\n    url: \"/webservices\",\n    templateUrl: \"views/Webservices.html\",\n    data: {\n      pageTitle: 'Webservices',\n      breadcrumbs: 'Webservices'\n    }\n  }).state('pages.scheduler', {\n    url: \"/scheduler\",\n    templateUrl: \"views/ShowScheduler.html\",\n    data: {\n      pageTitle: 'Scheduler',\n      breadcrumbs: 'Scheduler'\n    }\n  }).state('pages.add_schedule', {\n    url: \"/scheduler/new\",\n    templateUrl: \"views/AddEditSchedule.html\",\n    data: {\n      pageTitle: 'Add Schedule',\n      breadcrumbs: 'Scheduler > Add Schedule'\n    },\n    controller: 'AddScheduleCtrl'\n  }).state('pages.edit_schedule', {\n    url: \"/scheduler/edit/:group/:name\",\n    templateUrl: \"views/AddEditSchedule.html\",\n    data: {\n      pageTitle: 'Edit Schedule',\n      breadcrumbs: 'Scheduler > Edit Schedule'\n    },\n    controller: 'EditScheduleCtrl',\n    params: {\n      name: \"\",\n      group: \"\"\n    }\n  }).state('pages.environment_variables', {\n    url: \"/environment-variables\",\n    templateUrl: \"views/ShowEnvironmentVariables.html\",\n    data: {\n      pageTitle: 'Environment Variables',\n      breadcrumbs: 'Environment Variables'\n    }\n  }).state('pages.execute_query', {\n    url: \"/jdbc/execute-query\",\n    templateUrl: \"views/ExecuteJdbcQuery.html\",\n    data: {\n      pageTitle: 'Execute JDBC Query',\n      breadcrumbs: 'JDBC > Execute Query'\n    }\n  }).state('pages.browse_tables', {\n    url: \"/jdbc/browse-tables\",\n    templateUrl: \"views/BrowseJdbcTable.html\",\n    data: {\n      pageTitle: 'Browse JDBC Tables',\n      breadcrumbs: 'JDBC > Browse Tables'\n    }\n  }).state('pages.security_items', {\n    url: \"/security-items\",\n    templateUrl: \"views/ShowSecurityItems.html\",\n    data: {\n      pageTitle: 'Security Items',\n      breadcrumbs: 'Security Items'\n    }\n  }).state('pages.connection_overview', {\n    url: \"/connections\",\n    templateUrl: \"views/ShowConnectionOverview.html\",\n    resolve: {\n      loadPlugin: [\"lazyLoader\", function loadPlugin(lazyLoader) {\n        return lazyLoader.load('angular-datatables');\n      }]\n    },\n    data: {\n      pageTitle: 'Connection Overview',\n      breadcrumbs: 'Connection Overview'\n    }\n  }).state('pages.inlinestore_overview', {\n    url: \"/inlinestores/overview\",\n    templateUrl: \"views/ShowInlineMessageStoreOverview.html\",\n    data: {\n      pageTitle: 'InlineStore Overview',\n      breadcrumbs: 'InlineStore Overview'\n    }\n  }).state('pages.monitors', {\n    url: \"/monitors?configuration\",\n    templateUrl: \"views/ShowMonitors.html\",\n    data: {\n      pageTitle: 'Monitors',\n      breadcrumbs: 'Monitors'\n    },\n    params: {\n      configuration: {\n        value: null,\n        squash: true\n      }\n    }\n  }).state('pages.monitors_editTrigger', {\n    url: \"/monitors/:monitor/triggers/:trigger?configuration\",\n    templateUrl: \"views/EditMonitorTrigger.html\",\n    data: {\n      pageTitle: 'Edit Trigger',\n      breadcrumbs: 'Monitors > Triggers > Edit'\n    },\n    params: {\n      configuration: {\n        value: null,\n        squash: true\n      },\n      monitor: \"\",\n      trigger: \"\"\n    }\n  }).state('pages.monitors_addTrigger', {\n    url: \"/monitors/:monitor/triggers/new?configuration\",\n    templateUrl: \"views/EditMonitorTrigger.html\",\n    data: {\n      pageTitle: 'Add Trigger',\n      breadcrumbs: 'Monitors > Triggers > Add'\n    },\n    params: {\n      configuration: {\n        value: null,\n        squash: true\n      },\n      monitor: \"\"\n    }\n  }).state('pages.ibisstore_summary', {\n    url: \"/ibisstore-summary\",\n    templateUrl: \"views/ShowIbisstoreSummary.html\",\n    data: {\n      pageTitle: 'Ibisstore Summary',\n      breadcrumbs: 'JDBC > Ibisstore Summary'\n    }\n  }).state('pages.liquibase', {\n    url: \"/liquibase\",\n    templateUrl: \"views/ShowLiquibaseScript.html\",\n    data: {\n      pageTitle: 'Liquibase Script',\n      breadcrumbs: 'JDBC > Liquibase Script'\n    }\n  }).state('pages.customView', {\n    url: \"/customView/:name\",\n    templateUrl: \"views/iFrame.html\",\n    data: {\n      pageTitle: \"Custom View\",\n      breadcrumbs: 'Custom View',\n      iframe: true\n    },\n    params: {\n      name: {\n        value: '',\n        squash: true\n      },\n      url: {\n        value: '',\n        squash: true\n      }\n    },\n    controller: [\"$scope\", \"Misc\", \"$state\", \"$window\", function controller($scope, Misc, $state, $window) {\n      if ($state.params.url == \"\") $state.go('pages.status');\n      if ($state.params.url.indexOf(\"http\") > -1) {\n        $window.open($state.params.url, $state.params.name);\n        $scope.redirectURL = $state.params.url;\n      } else $scope.url = Misc.getServerPath() + $state.params.url;\n    }]\n  }).state('pages.larva', {\n    url: \"/testing/larva\",\n    templateUrl: \"views/iFrame.html\",\n    data: {\n      pageTitle: 'Larva',\n      breadcrumbs: 'Testing > Larva',\n      iframe: true\n    },\n    controller: [\"$scope\", \"Misc\", \"$interval\", function controller($scope, Misc, $interval) {\n      $scope.url = Misc.getServerPath() + \"iaf/larva\";\n    }]\n  }).state('pages.ladybug', {\n    url: \"/testing/ladybug\",\n    templateUrl: \"views/iFrame.html\",\n    data: {\n      pageTitle: 'Ladybug',\n      breadcrumbs: 'Testing > Ladybug',\n      iframe: true\n    },\n    controller: [\"$scope\", \"Misc\", \"$timeout\", function controller($scope, Misc, $timeout) {\n      $scope.url = Misc.getServerPath() + \"iaf/testtool\";\n    }]\n  }).state('pages.ladybug_beta', {\n    url: \"/testing/ladybug-beta\",\n    templateUrl: \"views/iFrame.html\",\n    data: {\n      pageTitle: 'Ladybug (beta)',\n      breadcrumbs: 'Testing > Ladybug (beta)',\n      iframe: true\n    },\n    controller: [\"$scope\", \"Misc\", function controller($scope, Misc) {\n      $scope.url = Misc.getServerPath() + \"iaf/ladybug\";\n    }]\n  }).state('pages.empty_page', {\n    url: \"/empty_page\",\n    templateUrl: \"views/empty_page.html\",\n    data: {\n      pageTitle: 'Empty Page'\n    }\n  }).state('pages.iaf_update', {\n    url: \"/iaf-update\",\n    templateUrl: \"views/iaf-update.html\",\n    data: {\n      pageTitle: 'IAF Update'\n    },\n    controller: [\"$scope\", \"$location\", \"Session\", function controller($scope, $location, Session) {\n      $scope.release = Session.get(\"IAF-Release\");\n      if ($scope.release == undefined) $location.path(\"status\");\n    }]\n  }).state('pages.loading', {\n    url: \"/\",\n    templateUrl: \"views/common/loading.html\"\n  }).state('pages.errorpage', {\n    url: \"/error\",\n    templateUrl: \"views/common/errorpage.html\"\n  });\n}]).run(['$rootScope', '$state', 'Debug', function ($rootScope, $state, Debug) {\n  // Set this asap on localhost to capture all debug data\n  if (location.hostname == \"localhost\") Debug.setLevel(3);\n  $rootScope.$state = $state;\n  $rootScope.foist = function (callback) {\n    Debug.warn(\"Dirty injection!\", callback);\n    try {\n      callback($rootScope);\n    } catch (err) {\n      Debug.error(\"Failed to execute injected code!\", err);\n    } finally {\n      $rootScope.$apply();\n    }\n  };\n  $rootScope.setLogLevel = function (level) {\n    Debug.setLevel(level);\n  };\n}]);\n\n//# sourceURL=webpack://gui/./js/config.js?");

/***/ }),

/***/ "./js/controllers.js":
/*!***************************!*\
  !*** ./js/controllers.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var pace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pace-js */ \"./node_modules/pace-js/pace.js\");\n/* harmony import */ var pace_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pace_js__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * MainCtrl - controller\n * Used on all pages except login/logout\n *\n */\n\nangular.module('iaf.beheerconsole').controller('MainCtrl', ['$scope', '$rootScope', 'appConstants', 'Api', 'Hooks', '$state', '$location', 'Poller', 'Notification', 'dateFilter', '$interval', 'Idle', '$http', 'Misc', '$uibModal', 'Session', 'Debug', 'SweetAlert', '$timeout', function ($scope, $rootScope, appConstants, Api, Hooks, $state, $location, Poller, Notification, dateFilter, $interval, Idle, $http, Misc, $uibModal, Session, Debug, SweetAlert, $timeout) {\n  $scope.loading = true;\n  $rootScope.adapters = {};\n  $scope.serverInfo = {};\n  function initializeFrankConsole() {\n    if (appConstants.init === -1) {\n      appConstants.init = 0;\n      Debug.log(\"Initializing Frank!Console\");\n    } else if (appConstants.init === 0) {\n      Debug.log(\"Cancelling 2nd initialization attempt\");\n      pace_js__WEBPACK_IMPORTED_MODULE_0___default().stop();\n      return;\n    } else {\n      Debug.info(\"Loading Frank!Console\", appConstants.init);\n    }\n    if (appConstants.init === 0) {\n      //Only continue if the init state was -1\n      appConstants.init = 1;\n      Api.Get(\"server/info\", function (data) {\n        $scope.serverInfo = data;\n        appConstants.init = 2;\n        if (!($location.path().indexOf(\"login\") >= 0)) {\n          Idle.watch();\n          angular.element(\"body\").removeClass(\"gray-bg\");\n          angular.element(\".main\").show();\n          angular.element(\".loading\").hide();\n        }\n        var serverTime = Date.parse(new Date(data.serverTime).toUTCString());\n        var localTime = Date.parse(new Date().toUTCString());\n        appConstants.timeOffset = serverTime - localTime;\n        function updateTime() {\n          var serverDate = new Date();\n          serverDate.setTime(serverDate.getTime() - appConstants.timeOffset);\n          $scope.serverTime = dateFilter(serverDate, appConstants[\"console.dateFormat\"]);\n        }\n        $interval(updateTime, 1000);\n        updateTime();\n        $rootScope.instanceName = data.instance.name;\n        angular.element(\".iaf-info\").html(data.framework.name + \" \" + data.framework.version + \": \" + data.instance.name + \" \" + data.instance.version);\n        $rootScope.dtapStage = data[\"dtap.stage\"];\n        $rootScope.dtapSide = data[\"dtap.side\"];\n        $rootScope.userName = data[\"userName\"];\n        if ($rootScope.dtapStage == \"LOC\") {\n          Debug.setLevel(3);\n        }\n\n        //Was it able to retrieve the serverinfo without logging in?\n        if (!$scope.loggedin) {\n          Idle.setTimeout(false);\n        }\n        Api.Get(\"server/configurations\", function (data) {\n          $scope.updateConfigurations(data);\n        });\n        Hooks.call(\"init\", false);\n      }, function (message, statusCode, statusText) {\n        if (statusCode == 500) {\n          $state.go(\"pages.errorpage\");\n        }\n      });\n      Api.Get(\"environmentvariables\", function (data) {\n        if (data[\"Application Constants\"]) {\n          appConstants = $.extend(appConstants, data[\"Application Constants\"][\"All\"]); //make FF!Application Constants default\n\n          var idleTime = parseInt(appConstants[\"console.idle.time\"]) > 0 ? parseInt(appConstants[\"console.idle.time\"]) : false;\n          if (idleTime > 0) {\n            var idleTimeout = parseInt(appConstants[\"console.idle.timeout\"]) > 0 ? parseInt(appConstants[\"console.idle.timeout\"]) : false;\n            Idle.setIdle(idleTime);\n            Idle.setTimeout(idleTimeout);\n          } else {\n            Idle.unwatch();\n          }\n          $scope.databaseSchedulesEnabled = appConstants[\"loadDatabaseSchedules.active\"] === 'true';\n          $rootScope.$broadcast('appConstants');\n        }\n      });\n    }\n    var token = sessionStorage.getItem('authToken');\n    $scope.loggedin = token != null && token != \"null\" ? true : false;\n  }\n  ;\n  pace_js__WEBPACK_IMPORTED_MODULE_0___default().on(\"done\", initializeFrankConsole);\n  $scope.$on('initializeFrankConsole', initializeFrankConsole);\n  $timeout(initializeFrankConsole, 250);\n  $scope.loggedin = false;\n  $scope.reloadRoute = function () {\n    $state.reload();\n  };\n  $scope.alerts = [];\n  $scope.addAlert = function (type, configuration, message) {\n    var line = message.match(/line \\[(\\d+)\\]/);\n    var isValidationAlert = message.indexOf(\"Validation\") !== -1;\n    var link = line && !isValidationAlert ? {\n      name: configuration,\n      '#': 'L' + line[1]\n    } : undefined;\n    $scope.alerts.push({\n      link: link,\n      type: type,\n      configuration: configuration,\n      message: message\n    });\n  };\n  $scope.addWarning = function (configuration, message) {\n    $scope.addAlert(\"warning\", configuration, message);\n  };\n  $scope.addException = function (configuration, message) {\n    $scope.addAlert(\"danger\", configuration, message);\n  };\n  $scope.closeAlert = function (index) {\n    $scope.alerts.splice(index, 1);\n  };\n  $scope.updateConfigurations = function (configurations) {\n    $scope.configurations = new Array();\n    for (var i in configurations) {\n      var config = configurations[i];\n      if (config.name.startsWith(\"IAF_\")) $scope.configurations.unshift(config);else $scope.configurations.push(config);\n    }\n    $rootScope.$broadcast('configurations', $scope.configurations);\n  };\n  $scope.adapterSummary = {\n    started: 0,\n    stopped: 0,\n    starting: 0,\n    stopping: 0,\n    error: 0\n  };\n  $scope.receiverSummary = {\n    started: 0,\n    stopped: 0,\n    starting: 0,\n    stopping: 0,\n    error: 0\n  };\n  $scope.messageSummary = {\n    info: 0,\n    warn: 0,\n    error: 0\n  };\n  $scope.getProcessStateIcon = function (processState) {\n    switch (processState) {\n      case \"Available\":\n        return \"fa-server\";\n      case \"InProcess\":\n        return \"fa-gears\";\n      case \"Done\":\n        return \"fa-sign-in\";\n      case \"Error\":\n        return \"fa-times-circle\";\n      case \"Hold\":\n        return \"fa-pause-circle\";\n    }\n  };\n  $scope.getProcessStateIconColor = function (processState) {\n    switch (processState) {\n      case \"Available\":\n        return \"success\";\n      case \"InProcess\":\n        return \"success\";\n      case \"Done\":\n        return \"success\";\n      case \"Error\":\n        return \"danger\";\n      case \"Hold\":\n        return \"warning\";\n    }\n  };\n  Hooks.register(\"init:once\", function () {\n    /* Check IAF version */\n    console.log(\"Checking IAF version with remote...\");\n    $http.get(\"https://ibissource.org/iaf/releases/?q=\" + Misc.getUID($scope.serverInfo)).then(function (response) {\n      if (!response || !response.data) return false;\n      var release = response.data[0]; //Not sure what ID to pick, smallest or latest?\n\n      var newVersion = release.tag_name.substr(0, 1) == \"v\" ? release.tag_name.substr(1) : release.tag_name;\n      var currentVersion = appConstants[\"application.version\"];\n      var version = Misc.compare_version(newVersion, currentVersion);\n      console.log(\"Comparing version: '\" + currentVersion + \"' with latest release: '\" + newVersion + \"'.\");\n      Session.remove(\"IAF-Release\");\n      if (version > 0) {\n        Session.set(\"IAF-Release\", release);\n        Notification.add('fa-exclamation-circle', \"IAF update available!\", false, function () {\n          $location.path(\"iaf-update\");\n        });\n      }\n      $scope.serverInfo = null;\n    })[\"catch\"](function (error) {\n      Debug.error(\"An error occured while comparing IAF versions\", error);\n      $scope.serverInfo = null;\n    });\n    Poller.add(\"server/warnings\", function (configurations) {\n      $scope.alerts = []; //Clear all old alerts\n\n      configurations['All'] = {\n        messages: configurations.messages\n      };\n      delete configurations.messages;\n      configurations['All'].errorStoreCount = configurations.totalErrorStoreCount;\n      delete configurations.totalErrorStoreCount;\n      for (var x in configurations.warnings) {\n        $scope.addWarning('', configurations.warnings[x]);\n      }\n      for (var i in configurations) {\n        var configuration = configurations[i];\n        if (configuration.exception) $scope.addException(i, configuration.exception);\n        if (configuration.warnings) {\n          for (var _x in configuration.warnings) {\n            $scope.addWarning(i, configuration.warnings[_x]);\n          }\n        }\n        configuration.messageLevel = \"INFO\";\n        for (var _x2 in configuration.messages) {\n          var level = configuration.messages[_x2].level;\n          if (level == \"WARN\" && configuration.messageLevel != \"ERROR\") configuration.messageLevel = \"WARN\";\n          if (level == \"ERROR\") configuration.messageLevel = \"ERROR\";\n        }\n      }\n      $scope.messageLog = configurations;\n    }, true, 60000);\n    var raw_adapter_data = {};\n    var pollerCallback = function pollerCallback(allAdapters) {\n      for (var adapterName in raw_adapter_data) {\n        //Check if any old adapters should be removed\n        if (!allAdapters[adapterName]) {\n          delete raw_adapter_data[adapterName];\n          delete $rootScope.adapters[adapterName];\n          Debug.log(\"removed adapter [\" + adapterName + \"]\");\n        }\n      }\n      for (var _adapterName in allAdapters) {\n        //Add new adapter information\n        var adapter = allAdapters[_adapterName];\n        if (raw_adapter_data[adapter.name] != JSON.stringify(adapter)) {\n          raw_adapter_data[adapter.name] = JSON.stringify(adapter);\n          adapter.status = \"started\";\n          for (var x in adapter.receivers) {\n            var adapterReceiver = adapter.receivers[x];\n            if (adapterReceiver.state != 'started') adapter.status = 'warning';\n            if (adapterReceiver.transactionalStores) {\n              var store = adapterReceiver.transactionalStores[\"ERROR\"];\n              if (store && store.numberOfMessages > 0) {\n                adapter.status = 'warning';\n              }\n            }\n          }\n          if (adapter.receiverReachedMaxExceptions) {\n            adapter.status = 'warning';\n          }\n          adapter.hasSender = false;\n          adapter.sendersMessageLogCount = 0;\n          adapter.senderTransactionalStorageMessageCount = 0;\n          for (var _x3 in adapter.pipes) {\n            var pipe = adapter.pipes[_x3];\n            if (pipe.sender) {\n              adapter.hasSender = true;\n              if (pipe.hasMessageLog) {\n                var count = parseInt(pipe.messageLogCount);\n                if (!Number.isNaN(count)) {\n                  if (pipe.isSenderTransactionalStorage) {\n                    adapter.senderTransactionalStorageMessageCount += count;\n                  } else {\n                    adapter.sendersMessageLogCount += count;\n                  }\n                }\n              }\n            }\n          }\n          /*\t\t\t\t\t//If last message is WARN or ERROR change adapter status to warning.\n          \t\t\t\t\tif(adapter.messages.length > 0 && adapter.status != 'stopped') {\n          \t\t\t\t\t\tvar message = adapter.messages[adapter.messages.length -1];\n          \t\t\t\t\t\tif(message.level != \"INFO\")\n          \t\t\t\t\t\t\tadapter.status = 'warning';\n          \t\t\t\t\t}\n          */\n          if (adapter.state != \"started\") {\n            adapter.status = \"stopped\";\n          }\n          $rootScope.adapters[adapter.name] = adapter;\n          $scope.updateAdapterSummary();\n          Hooks.call(\"adapterUpdated\", adapter);\n          //\t\t\t\t\t$scope.$broadcast('adapterUpdated', adapter);\n        }\n      }\n    };\n\n    //Get base information first, then update it with more details\n    Api.Get(\"adapters\", pollerCallback);\n    $timeout(function () {\n      Poller.add(\"adapters?expanded=all\", pollerCallback, true);\n      $scope.$broadcast('loading', false);\n    }, 3000);\n  });\n  var lastUpdated = 0;\n  var timeout = null;\n  $scope.updateAdapterSummary = function (configurationName) {\n    var updated = new Date().getTime();\n    if (updated - 3000 < lastUpdated && !configurationName) {\n      //3 seconds\n      clearTimeout(timeout);\n      timeout = setTimeout($scope.updateAdapterSummary, 1000);\n      return;\n    }\n    if (configurationName == undefined) configurationName = $state.params.configuration;\n    var adapterSummary = {\n      started: 0,\n      stopped: 0,\n      starting: 0,\n      stopping: 0,\n      exception_starting: 0,\n      exception_stopping: 0,\n      error: 0\n    };\n    var receiverSummary = {\n      started: 0,\n      stopped: 0,\n      starting: 0,\n      stopping: 0,\n      exception_starting: 0,\n      exception_stopping: 0,\n      error: 0\n    };\n    var messageSummary = {\n      info: 0,\n      warn: 0,\n      error: 0\n    };\n    var allAdapters = $rootScope.adapters;\n    for (var adapterName in allAdapters) {\n      var adapter = allAdapters[adapterName];\n      if (adapter.configuration == configurationName || configurationName == 'All') {\n        // Only adapters for active config\n        adapterSummary[adapter.state]++;\n        for (var i in adapter.receivers) {\n          receiverSummary[adapter.receivers[i].state.toLowerCase()]++;\n        }\n        for (var _i in adapter.messages) {\n          var level = adapter.messages[_i].level.toLowerCase();\n          messageSummary[level]++;\n        }\n      }\n    }\n    $scope.adapterSummary = adapterSummary;\n    $scope.receiverSummary = receiverSummary;\n    $scope.messageSummary = messageSummary;\n    lastUpdated = updated;\n  };\n  Hooks.register(\"adapterUpdated:once\", function () {\n    if ($location.path() == \"/status\" && $location.hash()) {\n      var el = angular.element(\"#\" + $location.hash());\n      if (el && el[0]) {\n        el[0].scrollIntoView();\n      }\n    }\n  });\n  Hooks.register(\"adapterUpdated\", function (adapter) {\n    var name = adapter.name;\n    if (name.length > 20) name = name.substring(0, 17) + \"...\";\n    if (adapter.started == true) {\n      for (var x in adapter.receivers) {\n        if (adapter.receivers[x].started == false) {\n          Notification.add('fa-exclamation-circle', \"Receiver '\" + name + \"' stopped!\", false, function () {\n            $location.path(\"status\");\n            $location.hash(adapter.name);\n          });\n        }\n      }\n    } else {\n      Notification.add('fa-exclamation-circle', \"Adapter '\" + name + \"' stopped!\", false, function () {\n        $location.path(\"status\");\n        $location.hash(adapter.name);\n      });\n    }\n  });\n  $scope.resetNotificationCount = function () {\n    Notification.resetCount();\n  };\n  $scope.$watch(function () {\n    return Notification.getCount();\n  }, function () {\n    $scope.notificationCount = Notification.getCount();\n    $scope.notificationList = Notification.getLatest(5);\n  });\n  $scope.$on('IdleStart', function () {\n    Poller.getAll().changeInterval(appConstants[\"console.idle.pollerInterval\"]);\n    var idleTimeout = parseInt(appConstants[\"console.idle.timeout\"]) > 0 ? parseInt(appConstants[\"console.idle.timeout\"]) : false;\n    if (!idleTimeout) return;\n    SweetAlert.Warning({\n      title: \"Idle timer...\",\n      text: \"Your session will be terminated in <span class='idleTimer'>60:00</span> minutes.\",\n      showConfirmButton: false,\n      showCloseButton: true\n    });\n  });\n  $scope.$on('IdleWarn', function (e, time) {\n    var minutes = Math.floor(time / 60);\n    var seconds = Math.round(time % 60);\n    if (minutes < 10) minutes = \"0\" + minutes;\n    if (seconds < 10) seconds = \"0\" + seconds;\n    var elm = angular.element(\".swal2-container\").find(\".idleTimer\");\n    elm.text(minutes + \":\" + seconds);\n  });\n  $scope.$on('IdleTimeout', function () {\n    SweetAlert.Info({\n      title: \"Idle timer...\",\n      text: \"You have been logged out due to inactivity.\",\n      showCloseButton: true\n    });\n    $location.path(\"logout\");\n  });\n  $scope.$on('IdleEnd', function () {\n    var elm = angular.element(\".swal2-container\").find(\".swal2-close\");\n    elm.click();\n    Poller.getAll().changeInterval(appConstants[\"console.pollerInterval\"]);\n  });\n  $scope.openInfoModel = function () {\n    $uibModal.open({\n      templateUrl: 'views/information.html',\n      //            size: 'sm',\n      controller: 'InformationCtrl'\n    });\n  };\n  $scope.sendFeedback = function (_rating) {\n    if (!appConstants[\"console.feedbackURL\"]) return;\n    $(\".rating i\").each(function (i, e) {\n      $(e).addClass(\"fa-star-o\").removeClass(\"fa-star\");\n    });\n    $uibModal.open({\n      templateUrl: 'views/feedback.html',\n      controller: 'FeedbackCtrl',\n      resolve: {\n        rating: function rating() {\n          return _rating;\n        }\n      }\n    });\n  };\n  $scope.hoverFeedback = function (rating) {\n    $(\".rating i\").removeClass(\"fa-star\").addClass(\"fa-star-o\");\n    $(\".rating i:nth-child(-n+\" + (rating + 1) + \")\").addClass(\"fa-star\").removeClass(\"fa-star-o\");\n  };\n}]).controller('LoadingPageCtrl', ['$scope', 'Api', '$state', function ($scope, Api, $state) {\n  Api.Get(\"server/health\", function () {\n    $state.go(\"pages.status\");\n  }, function (data, statusCode) {\n    if (statusCode == 401) return;\n    if (data.status == \"SERVICE_UNAVAILABLE\") {\n      $state.go(\"pages.status\");\n    } else {\n      $state.go(\"pages.errorpage\");\n    }\n  });\n}]).controller('ErrorPageCtrl', ['$scope', 'Api', '$state', '$interval', '$rootScope', '$timeout', function ($scope, Api, $state, $interval, $rootScope, $timeout) {\n  $scope.cooldownCounter = 0;\n  $scope.viewStackTrace = false;\n  var cooldown = function cooldown(data) {\n    $scope.cooldownCounter = 60;\n    if (data.status == \"error\" || data.status == \"INTERNAL_SERVER_ERROR\") {\n      $rootScope.startupError = data.error;\n      $scope.stackTrace = data.stackTrace;\n      var interval = $interval(function () {\n        $scope.cooldownCounter--;\n        if ($scope.cooldownCounter < 1) {\n          $interval.cancel(interval);\n          $scope.checkState();\n        }\n      }, 1000);\n    } else if (data.status == \"SERVICE_UNAVAILABLE\") {\n      $state.go(\"pages.status\");\n    }\n  };\n  $scope.checkState = function () {\n    Api.Get(\"server/health\", function () {\n      $state.go(\"pages.status\");\n      $timeout(function () {\n        window.location.reload();\n      }, 50);\n    }, cooldown);\n  };\n  $scope.checkState();\n}]).controller('InformationCtrl', ['$scope', '$uibModalInstance', '$uibModal', 'Api', '$timeout', function ($scope, $uibModalInstance, $uibModal, Api, $timeout) {\n  $scope.error = false;\n  Api.Get(\"server/info\", function (data) {\n    $.extend($scope, data);\n  }, function () {\n    $scope.error = true;\n  });\n  $scope.close = function () {\n    $uibModalInstance.close();\n  };\n  $scope.openCookieModel = function () {\n    $uibModalInstance.close(); //close the current model\n\n    $timeout(function () {\n      $uibModal.open({\n        templateUrl: 'views/common/cookieModal.html',\n        size: 'lg',\n        backdrop: 'static',\n        controller: 'CookieModalCtrl'\n      });\n    });\n  };\n}]).controller('FlowDiagramModalCtrl', ['$scope', '$uibModalInstance', 'xhr', function ($scope, $uibModalInstance, xhr) {\n  $scope.adapter = xhr.adapter;\n  $scope.flow = xhr.data;\n  $scope.close = function () {\n    $uibModalInstance.close();\n  };\n}]).controller('CookieModalCtrl', ['$scope', 'GDPR', 'appConstants', '$rootScope', '$uibModalInstance', function ($scope, GDPR, appConstants, $rootScope, $uibModalInstance) {\n  $scope.cookies = GDPR.defaults;\n  $rootScope.$on('appConstants', function () {\n    $scope.cookies = {\n      necessary: true,\n      personalization: appConstants.getBoolean(\"console.cookies.personalization\", true),\n      functional: appConstants.getBoolean(\"console.cookies.functional\", true)\n    };\n  });\n  $scope.consentAllCookies = function () {\n    $scope.savePreferences({\n      necessary: true,\n      personalization: true,\n      functional: true\n    });\n  };\n  $scope.close = function () {\n    $uibModalInstance.close();\n  };\n  $scope.savePreferences = function (cookies) {\n    GDPR.setSettings(cookies);\n    $uibModalInstance.close();\n  };\n}]).controller('errorController', ['$scope', 'Api', 'Debug', '$http', 'Misc', '$state', '$timeout', function ($scope, Api, Debug, $http, Misc, $state, $timeout) {\n  var timeout = null;\n  $scope.retry = function () {\n    $scope.retryInit = true;\n    angular.element('.retryInitBtn i').addClass('fa-spin');\n    $http.get(Misc.getServerPath() + \"ConfigurationServlet\").then(reload, reload)[\"catch\"](function (error) {\n      Debug.error(\"An error occured while foisting the IbisContext\", error);\n    });\n  };\n  function reload() {\n    window.location.reload();\n    $timeout.cancel(timeout);\n    $timeout(function () {\n      angular.element(\".main\").show();\n      angular.element(\".loading\").hide();\n    }, 100);\n  }\n  timeout = $timeout(function () {\n    $scope.retry();\n  }, 60000);\n}]).controller('FeedbackCtrl', ['$scope', '$uibModalInstance', '$http', 'rating', '$timeout', 'appConstants', 'SweetAlert', function ($scope, $uibModalInstance, $http, rating, $timeout, appConstants, SweetAlert) {\n  var URL = appConstants[\"console.feedbackURL\"];\n  $scope.form = {\n    rating: rating,\n    name: \"\",\n    feedback: \"\"\n  };\n  $timeout(function () {\n    while (rating >= 0) {\n      setRate(rating);\n      rating--;\n    }\n  }, 150);\n  $scope.setRating = function (ev, i) {\n    resetRating();\n    $scope.form.rating = i;\n    var j = i;\n    while (j >= 0) {\n      setRate(j);\n      j--;\n    }\n  };\n  function setRate(i) {\n    $(\".rating i.rating\" + i).removeClass(\"fa-star-o\");\n    $(\".rating i.rating\" + i).addClass(\"fa-star\");\n  }\n  ;\n  function resetRating() {\n    $(\".rating i\").each(function (i, e) {\n      $(e).addClass(\"fa-star-o\").removeClass(\"fa-star\");\n    });\n  }\n  ;\n  $scope.submit = function (form) {\n    form.rating++;\n    $http.post(URL, form, {\n      headers: {\n        \"Authorization\": undefined\n      }\n    }).then(function (response) {\n      if (response && response.data && response.data.result && response.data.result == \"ok\") SweetAlert.Success(\"Thank you for sending us feedback!\");else SweetAlert.Error(\"Oops, something went wrong...\", \"Please try again later!\");\n    })[\"catch\"](function (error) {\n      SweetAlert.Error(\"Oops, something went wrong...\", \"Please try again later!\");\n    });\n    $uibModalInstance.close();\n  };\n  $scope.close = function () {\n    $uibModalInstance.close();\n  };\n}]).filter('configurationFilter', function () {\n  return function (adapters, $scope) {\n    if (!adapters || adapters.length < 1) return [];\n    var r = {};\n    for (var adapterName in adapters) {\n      var adapter = adapters[adapterName];\n      if ((adapter.configuration == $scope.selectedConfiguration || $scope.selectedConfiguration == \"All\") && ($scope.filter == undefined || $scope.filter[adapter.status])) r[adapterName] = adapter;\n    }\n    return r;\n  };\n}).filter('searchFilter', function () {\n  return function (adapters, $scope) {\n    if (!adapters || adapters.length < 1) return [];\n    if (!$scope.searchText || $scope.searchText.length == 0) return adapters;\n    var searchText = $scope.searchText.toLowerCase();\n    var r = {};\n    for (var adapterName in adapters) {\n      var adapter = adapters[adapterName];\n      if (JSON.stringify(adapter).replace(/\"/g, '').toLowerCase().indexOf(searchText) > -1) r[adapterName] = adapter;\n    }\n    return r;\n  };\n}).controller('StatusCtrl', ['$scope', 'Hooks', 'Api', 'SweetAlert', 'Poller', '$filter', '$state', 'Misc', '$anchorScroll', '$location', '$http', function ($scope, Hooks, Api, SweetAlert, Poller, $filter, $state, Misc, $anchorScroll, $location, $http) {\n  var hash = $location.hash();\n  var adapterName = $state.params.adapter;\n  if (adapterName == \"\" && hash != \"\") {\n    //If the adapter param hasn't explicitly been set\n    adapterName = hash;\n  } else {\n    $location.hash(adapterName);\n  }\n  $scope.showContent = function (adapter) {\n    if (adapter.status == \"stopped\") {\n      return true;\n    } else if (adapterName != \"\" && adapter.name == adapterName) {\n      $anchorScroll();\n      return true;\n    } else {\n      return false;\n    }\n  };\n  this.filter = {\n    \"started\": true,\n    \"stopped\": true,\n    \"warning\": true\n  };\n  $scope.filter = this.filter;\n  $scope.applyFilter = function (filter) {\n    $scope.filter = filter;\n    $scope.updateQueryParams();\n  };\n  if ($state.params.filter != \"\") {\n    var filter = $state.params.filter.split(\"+\");\n    for (var f in $scope.filter) {\n      $scope.filter[f] = filter.indexOf(f) > -1;\n    }\n  }\n  $scope.searchText = \"\";\n  if ($state.params.search != \"\") {\n    $scope.searchText = $state.params.search;\n  }\n  $scope.selectedConfiguration = \"All\";\n  $scope.updateQueryParams = function () {\n    var filterStr = [];\n    for (var _f in $scope.filter) {\n      if ($scope.filter[_f]) filterStr.push(_f);\n    }\n    var transitionObj = {};\n    transitionObj.filter = filterStr.join(\"+\");\n    if ($scope.selectedConfiguration != \"All\") transitionObj.configuration = $scope.selectedConfiguration;\n    if ($scope.searchText.length > 0) transitionObj.search = $scope.searchText;\n    $state.transitionTo('pages.status', transitionObj, {\n      notify: false,\n      reload: false\n    });\n  };\n  $scope.collapseAll = function () {\n    $(\".adapters\").each(function (i, e) {\n      var a = $(e).find(\"div.ibox-title\");\n      angular.element(a).scope().showContent = false;\n    });\n  };\n  $scope.expandAll = function () {\n    $(\".adapters\").each(function (i, e) {\n      setTimeout(function () {\n        var a = $(e).find(\"div.ibox-title\");\n        angular.element(a).scope().showContent = true;\n      }, i * 10);\n    });\n  };\n  $scope.stopAll = function () {\n    var compiledAdapterList = Array();\n    var adapters = $filter('configurationFilter')($scope.adapters, $scope);\n    for (var adapter in adapters) {\n      var configuration = adapters[adapter].configuration;\n      compiledAdapterList.push(configuration + \"/\" + adapter);\n    }\n    Api.Put(\"adapters\", {\n      \"action\": \"stop\",\n      \"adapters\": compiledAdapterList\n    });\n  };\n  $scope.startAll = function () {\n    var compiledAdapterList = Array();\n    var adapters = $filter('configurationFilter')($scope.adapters, $scope);\n    for (var adapter in adapters) {\n      var configuration = adapters[adapter].configuration;\n      compiledAdapterList.push(configuration + \"/\" + adapter);\n    }\n    Api.Put(\"adapters\", {\n      \"action\": \"start\",\n      \"adapters\": compiledAdapterList\n    });\n  };\n  $scope.reloadConfiguration = function () {\n    if ($scope.selectedConfiguration == \"All\") return;\n    $scope.isConfigReloading[$scope.selectedConfiguration] = true;\n    Poller.getAll().stop();\n    Api.Put(\"configurations/\" + $scope.selectedConfiguration, {\n      \"action\": \"reload\"\n    }, function () {\n      startPollingForConfigurationStateChanges(function () {\n        Poller.getAll().start();\n      });\n    });\n  };\n  $scope.reloading = false;\n  $scope.fullReload = function () {\n    $scope.reloading = true;\n    Poller.getAll().stop();\n    Api.Put(\"configurations\", {\n      \"action\": \"reload\"\n    }, function () {\n      $scope.reloading = false;\n      startPollingForConfigurationStateChanges(function () {\n        Poller.getAll().start();\n      });\n    });\n  };\n  function startPollingForConfigurationStateChanges(callback) {\n    Poller.add(\"server/configurations\", function (configurations) {\n      $scope.updateConfigurations(configurations);\n      var ready = true;\n      for (var i in configurations) {\n        var config = configurations[i];\n        //When all configurations are in state STARTED or in state STOPPED with an exception, remove the poller\n        if (config.state != \"STARTED\" && !(config.state == \"STOPPED\" && config.exception != null)) {\n          ready = false;\n          break;\n        }\n      }\n      if (ready) {\n        //Remove poller once all states are STARTED\n        Poller.remove(\"server/configurations\");\n        if (callback != null && typeof callback == \"function\") callback();\n      }\n    }, true);\n  }\n  $scope.showReferences = function () {\n    window.open($scope.configurationFlowDiagram);\n  };\n  $scope.configurationFlowDiagram = null;\n  $scope.updateConfigurationFlowDiagram = function (configurationName) {\n    var url = Misc.getServerPath() + 'iaf/api/configurations/';\n    if (configurationName == \"All\") {\n      url += \"?flow=true\";\n    } else {\n      url += configurationName + \"/flow\";\n    }\n    $http.get(url).then(function (data) {\n      var status = data && data.status ? data.status : 204;\n      if (status == 200) {\n        $scope.configurationFlowDiagram = url;\n      }\n    });\n  };\n  $scope.$on('appConstants', function () {\n    $scope.updateConfigurationFlowDiagram($scope.selectedConfiguration);\n  });\n  $scope.isConfigStubbed = {};\n  $scope.isConfigReloading = {};\n  $scope.check4StubbedConfigs = function () {\n    for (var i in $scope.configurations) {\n      var config = $scope.configurations[i];\n      $scope.isConfigStubbed[config.name] = config.stubbed;\n      $scope.isConfigReloading[config.name] = config.state == \"STARTING\" || config.state == \"STOPPING\"; //Assume reloading when in state STARTING (LOADING) or in state STOPPING (UNLOADING)\n    }\n  };\n\n  $scope.$watch('configurations', $scope.check4StubbedConfigs);\n  $scope.changeConfiguration = function (name) {\n    $scope.selectedConfiguration = name;\n    $scope.updateAdapterSummary(name);\n    $scope.updateQueryParams();\n    $scope.updateConfigurationFlowDiagram(name);\n  };\n  if ($state.params.configuration != \"All\") $scope.changeConfiguration($state.params.configuration);\n  $scope.startAdapter = function (adapter) {\n    adapter.state = 'starting';\n    Api.Put(\"configurations/\" + adapter.configuration + \"/adapters/\" + Misc.escapeURL(adapter.name), {\n      \"action\": \"start\"\n    });\n  };\n  $scope.stopAdapter = function (adapter) {\n    adapter.state = 'stopping';\n    Api.Put(\"configurations/\" + adapter.configuration + \"/adapters/\" + Misc.escapeURL(adapter.name), {\n      \"action\": \"stop\"\n    });\n  };\n  $scope.startReceiver = function (adapter, receiver) {\n    receiver.state = 'loading';\n    Api.Put(\"configurations/\" + adapter.configuration + \"/adapters/\" + Misc.escapeURL(adapter.name) + \"/receivers/\" + Misc.escapeURL(receiver.name), {\n      \"action\": \"start\"\n    });\n  };\n  $scope.stopReceiver = function (adapter, receiver) {\n    receiver.state = 'loading';\n    Api.Put(\"configurations/\" + adapter.configuration + \"/adapters/\" + Misc.escapeURL(adapter.name) + \"/receivers/\" + Misc.escapeURL(receiver.name), {\n      \"action\": \"stop\"\n    });\n  };\n  $scope.addThread = function (adapter, receiver) {\n    receiver.state = 'loading';\n    Api.Put(\"configurations/\" + adapter.configuration + \"/adapters/\" + Misc.escapeURL(adapter.name) + \"/receivers/\" + Misc.escapeURL(receiver.name), {\n      \"action\": \"incthread\"\n    });\n  };\n  $scope.removeThread = function (adapter, receiver) {\n    receiver.state = 'loading';\n    Api.Put(\"configurations/\" + adapter.configuration + \"/adapters/\" + Misc.escapeURL(adapter.name) + \"/receivers/\" + Misc.escapeURL(receiver.name), {\n      \"action\": \"decthread\"\n    });\n  };\n}]).controller('InfoBarCtrl', ['$scope', function ($scope) {\n  $scope.$on('loading', function (event, loading) {\n    $scope.loading = loading;\n  });\n}]).controller('LogoutCtrl', ['$scope', 'Poller', 'authService', 'Idle', function ($scope, Poller, authService, Idle) {\n  Poller.getAll().remove();\n  Idle.unwatch();\n  authService.logout();\n}]).controller('LoginCtrl', ['$scope', 'authService', '$timeout', 'Alert', function ($scope, authService, $timeout, Alert) {\n  $timeout(function () {\n    $scope.notifications = Alert.get();\n    angular.element(\".main\").show();\n    angular.element(\".loading\").hide();\n    angular.element(\"body\").addClass(\"gray-bg\");\n  }, 500);\n  authService.loggedin(); //Check whether or not the client is logged in.\n  $scope.credentials = {};\n  $scope.login = function (credentials) {\n    authService.login(credentials.username, credentials.password);\n  };\n}]).controller('NotificationsCtrl', ['$scope', 'Api', '$stateParams', 'Hooks', 'Notification', function ($scope, Api, $stateParams, Hooks, Notification) {\n  if ($stateParams.id > 0) {\n    $scope.notification = Notification.get($stateParams.id);\n  } else {\n    $scope.text = \"Showing a list with all notifications!\";\n  }\n  Hooks.register(\"adapterUpdated:2\", function (adapter) {\n    console.warn(\"What is the scope of: \", adapter);\n  });\n}])\n\n//** Ctrls **//\n.controller('ManageConfigurationsCtrl', ['$scope', 'Api', function ($scope, Api) {\n  Api.Get(\"server/configurations\", function (data) {\n    $scope.updateConfigurations(data);\n  });\n}]).controller('ManageConfigurationDetailsCtrl', ['$scope', '$state', 'Api', 'Debug', 'Misc', '$interval', 'SweetAlert', 'Toastr', function ($scope, $state, Api, Debug, Misc, $interval, SweetAlert, Toastr) {\n  $scope.loading = false;\n  var promise = $interval(function () {\n    update();\n  }, 30000);\n  $scope.$on('$destroy', function () {\n    $interval.cancel(promise);\n  });\n  $scope.configuration = $state.params.name;\n  function update() {\n    $scope.loading = true;\n    Api.Get(\"configurations/\" + $state.params.name + \"/versions\", function (data) {\n      for (var x in data) {\n        var configs = data[x];\n        if (configs.active) {\n          configs.actived = true;\n        }\n      }\n      $scope.versions = data;\n      $scope.loading = false;\n    });\n  }\n  ;\n  update();\n  $scope.download = function (config) {\n    window.open(Misc.getServerPath() + \"iaf/api/configurations/\" + config.name + \"/versions/\" + encodeURIComponent(config.version) + \"/download\");\n  };\n  $scope.deleteConfig = function (config) {\n    var message = \"\";\n    if (config.version) {\n      message = \"Are you sure you want to remove version '\" + config.version + \"'?\";\n    } else {\n      message = \"Are you sure?\";\n    }\n    SweetAlert.Confirm({\n      title: message\n    }, function (imSure) {\n      if (imSure) {\n        Api.Delete(\"configurations/\" + config.name + \"/versions/\" + encodeURIComponent(config.version), function () {\n          Toastr.success(\"Successfully removed version '\" + config.version + \"'\");\n          update();\n        });\n      }\n    });\n  };\n  $scope.activate = function (config) {\n    for (var x in $scope.versions) {\n      var configs = $scope.versions[x];\n      if (configs.version != config.version) configs.actived = false;\n    }\n    Api.Put(\"configurations/\" + config.name + \"/versions/\" + encodeURIComponent(config.version), {\n      activate: config.active\n    }, function (data) {\n      Toastr.success(\"Successfully changed startup config to version '\" + config.version + \"'\");\n    }, function () {\n      update();\n    });\n  };\n  $scope.scheduleReload = function (config) {\n    Api.Put(\"configurations/\" + config.name + \"/versions/\" + encodeURIComponent(config.version), {\n      autoreload: config.autoreload\n    }, function (data) {\n      Toastr.success(\"Successfully \" + (config.autoreload ? \"enabled\" : \"disabled\") + \" Auto Reload for version '\" + config.version + \"'\");\n    }, function () {\n      update();\n    });\n  };\n}]).controller('UploadConfigurationsCtrl', ['$scope', 'Api', 'appConstants', function ($scope, Api, appConstants) {\n  $scope.datasources = {};\n  $scope.form = {};\n  $scope.$on('appConstants', function () {\n    $scope.form.datasource = appConstants['jdbc.datasource.default'];\n  });\n  Api.Get(\"jdbc\", function (data) {\n    $.extend($scope, data);\n    $scope.form.datasource = appConstants['jdbc.datasource.default'] != undefined ? appConstants['jdbc.datasource.default'] : data.datasources[0];\n  });\n  $scope.form = {\n    datasource: \"\",\n    encoding: \"\",\n    multiple_configs: false,\n    activate_config: true,\n    automatic_reload: false\n  };\n  $scope.file = null;\n  $scope.submit = function () {\n    if ($scope.file == null) return;\n    var fd = new FormData();\n    if ($scope.form.datasource && $scope.form.datasource != \"\") fd.append(\"datasource\", $scope.form.datasource);else fd.append(\"datasource\", $scope.datasources[0]);\n    fd.append(\"encoding\", $scope.form.encoding);\n    fd.append(\"multiple_configs\", $scope.form.multiple_configs);\n    fd.append(\"activate_config\", $scope.form.activate_config);\n    fd.append(\"automatic_reload\", $scope.form.automatic_reload);\n    fd.append(\"file\", $scope.file, $scope.file.name);\n    Api.Post(\"configurations\", fd, function (data) {\n      $scope.error = \"\";\n      $scope.result = \"\";\n      for (var pair in data) {\n        if (data[pair] == \"loaded\") {\n          $scope.result += \"Successfully uploaded configuration [\" + pair + \"]<br/>\";\n        } else {\n          $scope.error += \"Could not upload configuration from the file [\" + pair + \"]: \" + data[pair] + \"<br/>\";\n        }\n      }\n      $scope.form = {\n        datasource: $scope.datasources[0],\n        encoding: \"\",\n        multiple_configs: false,\n        activate_config: true,\n        automatic_reload: false\n      };\n      if ($scope.file != null) {\n        angular.element(\".form-file\")[0].value = null;\n        $scope.file = null;\n      }\n    }, function (errorData, status, errorMsg) {\n      var error = errorData ? errorData.error : errorMsg;\n      $scope.error = error;\n      $scope.result = \"\";\n    }, false);\n  };\n  $scope.reset = function () {\n    $scope.result = \"\";\n    $scope.error = \"\";\n    $scope.form = {\n      datasource: $scope.datasources[0],\n      name: \"\",\n      version: \"\",\n      encoding: \"\",\n      multiple_configs: false,\n      activate_config: true,\n      automatic_reload: false\n    };\n  };\n}]).controller('ShowConfigurationCtrl', ['$scope', 'Api', '$state', '$location', function ($scope, Api, $state, $location) {\n  $scope.selectedConfiguration = $state.params.name != '' ? $state.params.name : \"All\";\n  $scope.loadedConfiguration = $state.params.loaded != undefined && $state.params.loaded == false;\n  $scope.update = function () {\n    getConfiguration();\n  };\n  var anchor = $location.hash();\n  $scope.changeConfiguration = function (name) {\n    $scope.selectedConfiguration = name;\n    $location.hash(''); //clear the hash from the url\n    anchor = null; //unset hash anchor\n    getConfiguration();\n  };\n  $scope.updateQueryParams = function () {\n    var transitionObj = {};\n    if ($scope.selectedConfiguration != \"All\") transitionObj.name = $scope.selectedConfiguration;\n    if (!$scope.loadedConfiguration) transitionObj.loaded = $scope.loadedConfiguration;\n    $state.transitionTo('pages.configuration', transitionObj, {\n      notify: false,\n      reload: false\n    });\n  };\n  $scope.clipboard = function () {\n    if ($scope.configuration) {\n      var el = document.createElement('textarea');\n      el.value = $scope.configuration;\n      el.setAttribute('readonly', '');\n      el.style.position = 'absolute';\n      el.style.left = '-9999px';\n      document.body.appendChild(el);\n      el.select();\n      document.execCommand('copy');\n      document.body.removeChild(el);\n    }\n  };\n  getConfiguration = function getConfiguration() {\n    $scope.updateQueryParams();\n    var uri = \"configurations\";\n    if ($scope.selectedConfiguration != \"All\") uri += \"/\" + $scope.selectedConfiguration;\n    if ($scope.loadedConfiguration) uri += \"?loadedConfiguration=true\";\n    Api.Get(uri, function (data) {\n      $scope.configuration = data;\n      if (anchor) {\n        $location.hash(anchor);\n      }\n    });\n  };\n  getConfiguration();\n}]).filter('variablesFilter', [function () {\n  return function (variables, filterText) {\n    var returnArray = new Array();\n    filterText = filterText.toLowerCase();\n    for (var i in variables) {\n      var variable = variables[i];\n      if (JSON.stringify(variable).toLowerCase().indexOf(filterText) > -1) {\n        returnArray.push(variable);\n      }\n    }\n    return returnArray;\n  };\n}]).controller('EnvironmentVariablesCtrl', ['$scope', 'Api', 'appConstants', function ($scope, Api, appConstants) {\n  $scope.variables = {};\n  $scope.searchFilter = \"\";\n  $scope.selectedConfiguration = null;\n  $scope.changeConfiguration = function (name) {\n    $scope.selectedConfiguration = name;\n    $scope.configProperties = $scope.appConstants[name];\n  };\n  $scope.configProperties = [];\n  $scope.environmentProperties = [];\n  $scope.systemProperties = [];\n  $scope.appConstants = [];\n  Api.Get(\"environmentvariables\", function (data) {\n    var instanceName = null;\n    for (var configName in data[\"Application Constants\"]) {\n      $scope.appConstants[configName] = convertPropertiesToArray(data[\"Application Constants\"][configName]);\n      if (instanceName == null) {\n        instanceName = data[\"Application Constants\"][configName][\"instance.name\"];\n      }\n    }\n    $scope.changeConfiguration(\"All\");\n    $scope.environmentProperties = convertPropertiesToArray(data[\"Environment Variables\"]);\n    $scope.systemProperties = convertPropertiesToArray(data[\"System Properties\"]);\n  });\n  function convertPropertiesToArray(propertyList) {\n    var tmp = new Array();\n    for (var variableName in propertyList) {\n      tmp.push({\n        key: variableName,\n        val: propertyList[variableName]\n      });\n    }\n    return tmp;\n  }\n}]).controller('AdapterStatisticsCtrl', ['$scope', 'Api', '$stateParams', 'SweetAlert', '$timeout', '$filter', 'appConstants', 'Debug', 'Misc', function ($scope, Api, $stateParams, SweetAlert, $timeout, $filter, appConstants, Debug, Misc) {\n  var adapterName = $stateParams.name;\n  if (!adapterName) return SweetAlert.Warning(\"Adapter not found!\");\n  $scope.adapterName = adapterName;\n  $scope.refreshing = false;\n  $scope.hourlyStatistics = {\n    labels: [],\n    data: []\n  };\n  $scope.stats = [];\n  var defaults = {\n    \"name\": \"Name\",\n    \"count\": \"Count\",\n    \"min\": \"Min\",\n    \"max\": \"Max\",\n    \"avg\": \"Average\",\n    \"stdDev\": \"StdDev\",\n    \"sum\": \"Sum\",\n    \"first\": \"First\",\n    \"last\": \"Last\"\n  };\n  $scope.statisticsTimeBoundaries = angular.copy(defaults);\n  $scope.statisticsSizeBoundaries = angular.copy(defaults);\n  function populateBoundaries() {\n    var timeBoundaries = appConstants[\"Statistics.boundaries\"].split(\",\");\n    var sizeBoundaries = appConstants[\"Statistics.size.boundaries\"].split(\",\");\n    var percBoundaries = appConstants[\"Statistics.percentiles\"].split(\",\");\n    var publishPercentiles = appConstants[\"Statistics.percentiles.publish\"] == \"true\";\n    var publishHistograms = appConstants[\"Statistics.histograms.publish\"] == \"true\";\n    var calculatePercentiles = appConstants[\"Statistics.percentiles.internal\"] == \"true\";\n    var displayPercentiles = publishPercentiles || publishHistograms || calculatePercentiles;\n    Debug.info(\"appending Statistic.boundaries\", timeBoundaries, sizeBoundaries, percBoundaries);\n    for (var i in timeBoundaries) {\n      var j = timeBoundaries[i];\n      $scope.statisticsTimeBoundaries[j + \"ms\"] = \"< \" + j + \"ms\";\n    }\n    for (var _i2 in sizeBoundaries) {\n      var j = sizeBoundaries[_i2];\n      $scope.statisticsSizeBoundaries[j + \"B\"] = \"< \" + j + \"B\";\n    }\n    if (displayPercentiles) {\n      for (var _i3 in percBoundaries) {\n        var j = \"p\" + percBoundaries[_i3];\n        $scope.statisticsTimeBoundaries[j] = j;\n        $scope.statisticsSizeBoundaries[j] = j;\n      }\n    }\n  }\n  ;\n  if (appConstants[\"Statistics.boundaries\"]) {\n    populateBoundaries(); //AppConstants already loaded\n  } else {\n    $scope.$on('appConstants', populateBoundaries); //Wait for appConstants trigger to load\n  }\n\n  $scope.statisticsNames = [];\n  $scope.refresh = function () {\n    $scope.refreshing = true;\n    Api.Get(\"adapters/\" + Misc.escapeURL(adapterName) + \"/statistics\", function (data) {\n      $scope.stats = data;\n      var labels = [];\n      var chartData = [];\n      for (var i in data[\"hourly\"]) {\n        var a = data[\"hourly\"][i];\n        labels.push(a[\"time\"]);\n        chartData.push(a[\"count\"]);\n      }\n      $scope.hourlyStatistics.labels = labels;\n      $scope.hourlyStatistics.data = chartData;\n      $timeout(function () {\n        $scope.refreshing = false;\n      }, 500);\n    });\n  };\n  $scope.dataset = {\n    fill: false,\n    backgroundColor: \"#2f4050\",\n    borderColor: \"#2f4050\"\n  };\n  $scope.options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      yAxes: [{\n        display: true,\n        scaleLabel: {\n          display: true,\n          labelString: 'Messages Per Hour'\n        },\n        ticks: {\n          beginAtZero: true,\n          suggestedMax: 10\n        }\n      }]\n    },\n    tooltips: {\n      mode: 'index',\n      intersect: false,\n      displayColors: false\n    },\n    hover: {\n      mode: 'nearest',\n      intersect: true\n    }\n  };\n  $timeout(function () {\n    $scope.refresh();\n  }, 1000);\n}]).controller('StorageBaseCtrl', ['$scope', 'Api', '$state', 'SweetAlert', 'Misc', function ($scope, Api, $state, SweetAlert, Misc) {\n  $scope.notes = [];\n  $scope.addNote = function (type, message, removeQueue) {\n    $scope.notes.push({\n      type: type,\n      message: message\n    });\n  };\n  $scope.closeNote = function (index) {\n    $scope.notes.splice(index, 1);\n  };\n  $scope.closeNotes = function () {\n    $scope.notes = [];\n  };\n  $scope.adapterName = $state.params.adapter;\n  if (!$scope.adapterName) return SweetAlert.Warning(\"Invalid URL\", \"No adapter name provided!\");\n  $scope.storageSourceName = $state.params.storageSourceName;\n  if (!$scope.storageSourceName) return SweetAlert.Warning(\"Invalid URL\", \"No receiver or pipe name provided!\");\n  $scope.storageSource = $state.params.storageSource;\n  if (!$scope.storageSource) return SweetAlert.Warning(\"Invalid URL\", \"Component type [receivers] or [pipes] is not provided in url!\");\n  $scope.processState = $state.params.processState;\n  if (!$scope.processState) return SweetAlert.Warning(\"Invalid URL\", \"No storage type provided!\");\n  $scope.base_url = \"adapters/\" + Misc.escapeURL($scope.adapterName) + \"/\" + $scope.storageSource + \"/\" + Misc.escapeURL($scope.storageSourceName) + \"/stores/\" + $scope.processState;\n  $scope.updateTable = function () {\n    var table = $('#datatable').DataTable();\n    if (table) table.draw();\n  };\n  $scope.doDeleteMessage = function (message, callback) {\n    message.deleting = true;\n    var messageId = message.id;\n    Api.Delete($scope.base_url + \"/messages/\" + encodeURIComponent(encodeURIComponent(messageId)), function () {\n      if (callback != undefined && typeof callback == 'function') callback(messageId);\n      $scope.addNote(\"success\", \"Successfully deleted message with ID: \" + messageId);\n      $scope.updateTable();\n    }, function () {\n      message.deleting = false;\n      $scope.addNote(\"danger\", \"Unable to delete messages with ID: \" + messageId);\n      $scope.updateTable();\n    }, false);\n  };\n  $scope.downloadMessage = function (messageId) {\n    window.open(Misc.getServerPath() + \"iaf/api/\" + $scope.base_url + \"/messages/\" + encodeURIComponent(encodeURIComponent(messageId)) + \"/download\");\n  };\n  $scope.doResendMessage = function (message, callback) {\n    message.resending = true;\n    var messageId = message.id;\n    Api.Put($scope.base_url + \"/messages/\" + encodeURIComponent(encodeURIComponent(messageId)), false, function () {\n      if (callback != undefined && typeof callback == 'function') callback(message.id);\n      $scope.addNote(\"success\", \"Message with ID: \" + messageId + \" will be reprocessed\");\n      $scope.updateTable();\n    }, function (data) {\n      message.resending = false;\n      data = data.error ? data.error : data;\n      $scope.addNote(\"danger\", \"Unable to resend message [\" + messageId + \"]. \" + data);\n      $scope.updateTable();\n    }, false);\n  };\n}]).controller('AdapterStorageCtrl', ['$scope', 'Api', '$compile', 'Cookies', 'Session', 'SweetAlert', function ($scope, Api, $compile, Cookies, Session, SweetAlert) {\n  $scope.closeNotes();\n  $scope.selectedMessages = [];\n  $scope.targetStates = [];\n  var a = '';\n  a += '<input icheck type=\"checkbox\" ng-model=\"selectedMessages[message.id]\"/>';\n  a += '<div ng-show=\"!selectedMessages[message.id]\">';\n  a += '<a ui-sref=\"pages.storage.view({adapter:adapterName,receiver:receiverName,processState:processState,messageId: message.id })\" class=\"btn btn-info btn-xs\" type=\"button\"><i class=\"fa fa-file-text-o\"></i> View</a>';\n  a += '<button ng-if=\"::processState==\\'Error\\'\" ladda=\"message.resending\" data-style=\"slide-down\" title=\"Resend Message\" ng-click=\"resendMessage(message)\" class=\"btn btn-warning btn-xs\" type=\"button\"><i class=\"fa fa-repeat\"></i> Resend</button>';\n  a += '<button ng-if=\"::processState==\\'Error\\'\" ladda=\"message.deleting\" data-style=\"slide-down\" title=\"Delete Message\" ng-click=\"deleteMessage(message)\" class=\"btn btn-danger btn-xs\" type=\"button\"><i class=\"fa fa-times\"></i> Delete</button>';\n  a += '<button title=\"Download Message\" ng-click=\"downloadMessage(message.id)\" class=\"btn btn-info btn-xs\" type=\"button\"><i class=\"fa fa-arrow-circle-o-down\"></i> Download</button>';\n  a += '</div';\n  var columns = [{\n    \"data\": null,\n    defaultContent: a,\n    className: \"m-b-xxs storageActions\",\n    bSortable: false\n  }, {\n    \"name\": \"pos\",\n    \"data\": \"position\",\n    bSortable: false,\n    defaultContent: \"\"\n  }, {\n    \"name\": \"id\",\n    \"data\": \"messageId\",\n    bSortable: false,\n    defaultContent: \"\"\n  }, {\n    \"name\": \"insertDate\",\n    \"data\": \"insertDate\",\n    className: \"date\",\n    defaultContent: \"\"\n  }, {\n    \"name\": \"host\",\n    \"data\": \"host\",\n    bSortable: false,\n    defaultContent: \"\"\n  }, {\n    \"name\": \"originalId\",\n    \"data\": \"originalId\",\n    bSortable: false,\n    defaultContent: \"\"\n  }, {\n    \"name\": \"correlationId\",\n    \"data\": \"correlationId\",\n    bSortable: false,\n    defaultContent: \"\"\n  }, {\n    \"name\": \"comment\",\n    \"data\": \"comment\",\n    bSortable: false,\n    defaultContent: \"\"\n  }, {\n    \"name\": \"expiryDate\",\n    \"data\": \"expiryDate\",\n    className: \"date\",\n    bSortable: false,\n    defaultContent: \"\"\n  }, {\n    \"name\": \"label\",\n    \"data\": \"label\",\n    bSortable: false,\n    defaultContent: \"\"\n  }];\n  var filterCookie = Cookies.get($scope.processState + \"Filter\");\n  if (filterCookie) {\n    for (var column in columns) {\n      if (column.name && filterCookie[column.name] === false) {\n        column.visible = false;\n      }\n    }\n    $scope.displayColumn = filterCookie;\n  } else {\n    $scope.displayColumn = {\n      id: true,\n      insertDate: true,\n      host: true,\n      originalId: true,\n      correlationId: true,\n      comment: true,\n      expiryDate: true,\n      label: true\n    };\n  }\n  $scope.searchUpdated = function () {\n    $scope.searching = true;\n    $scope.updateTable();\n  };\n  $scope.truncated = false;\n  $scope.truncateButtonText = \"Truncate displayed data\";\n  $scope.truncate = function () {\n    $scope.truncated = !$scope.truncated;\n    if ($scope.truncated) {\n      $scope.truncateButtonText = \"Show original\";\n    } else {\n      $scope.truncateButtonText = \"Truncate displayed data\";\n    }\n    $scope.updateTable();\n  };\n  $scope.dtOptions = {\n    stateSave: true,\n    stateSaveCallback: function stateSaveCallback(settings, data) {\n      data.columns = columns;\n      Session.set('DataTable' + $scope.processState, data);\n    },\n    stateLoadCallback: function stateLoadCallback(settings) {\n      return Session.get('DataTable' + $scope.processState);\n    },\n    drawCallback: function drawCallback(settings) {\n      // reset visited rows with all draw actions e.g. pagination, filter, search\n      $scope.selectedMessages = [];\n      var table = $('#datatable').DataTable();\n      var data = table.rows({\n        page: 'current'\n      }).data();\n      // visit rows in the current page once (draw event is fired after rowcallbacks)\n      for (var i = 0; i < data.length; i++) {\n        $scope.selectedMessages[data[i].id] = false;\n      }\n    },\n    rowCallback: function rowCallback(row, data) {\n      var row = $(row); // .children(\"td:first\").addClass(\"m-b-xxs\");\n      row.children(\"td.date\").each(function (_, element) {\n        var time = $(this).text();\n        if (time) $(element).attr({\n          \"to-date\": \"\",\n          \"time\": time\n        });\n      });\n      var scope = $scope.$new();\n      scope.message = data;\n      $scope.selectedMessages[data.id] = false;\n      $compile(row)(scope);\n    },\n    searching: false,\n    scrollX: true,\n    bAutoWidth: false,\n    orderCellsTop: true,\n    serverSide: true,\n    processing: true,\n    paging: true,\n    lengthMenu: [10, 25, 50, 100, 500, 999],\n    order: [[3, 'asc']],\n    columns: columns,\n    columnDefs: [{\n      targets: 0,\n      render: function render(data, type, row) {\n        if (type === 'display') {\n          data[\"messageId\"] = data[\"id\"];\n          for (var i in data) {\n            if (i == \"id\") continue;\n            var columnData = data[i];\n            if (typeof columnData == 'string' && columnData.length > 30 && $scope.truncated) {\n              data[i] = '<span title=\"' + columnData.replace(/\"/g, '&quot;') + '\">' + columnData.substr(0, 15) + ' &#8230; ' + columnData.substr(-15) + '</span>';\n            }\n          }\n        }\n        return data;\n      }\n    }],\n    sAjaxDataProp: 'messages',\n    ajax: function ajax(data, callback, settings) {\n      var start = data.start;\n      var length = data.length;\n      var order = data.order[0];\n      var direction = order.dir; // asc or desc\n\n      var url = $scope.base_url + \"?max=\" + length + \"&skip=\" + start + \"&sort=\" + direction;\n      var search = $scope.search;\n      var searchSession = {};\n      for (var _column in search) {\n        var text = search[_column];\n        if (text) {\n          url += \"&\" + _column + \"=\" + text;\n          searchSession[_column] = text;\n        }\n      }\n      Session.set('search', searchSession);\n      Api.Get(url, function (response) {\n        response.draw = data.draw;\n        response.recordsTotal = response.totalMessages;\n        $scope.targetStates = response.targetStates;\n        callback(response);\n        $scope.searching = false;\n        $scope.clearSearchLadda = false;\n      }, function (error) {\n        $scope.searching = false;\n        $scope.clearSearchLadda = false;\n      });\n    }\n  };\n  var searchSession = Session.get('search');\n  $scope.search = {\n    id: searchSession ? searchSession['id'] : \"\",\n    startDate: searchSession ? searchSession[\"startDate\"] : \"\",\n    endDate: searchSession ? searchSession[\"endDate\"] : \"\",\n    host: searchSession ? searchSession[\"host\"] : \"\",\n    messageId: searchSession ? searchSession[\"messageId\"] : \"\",\n    correlationId: searchSession ? searchSession[\"correlationId\"] : \"\",\n    comment: searchSession ? searchSession[\"comment\"] : \"\",\n    label: searchSession ? searchSession[\"label\"] : \"\",\n    message: searchSession ? searchSession[\"message\"] : \"\"\n  };\n  $scope.clearSearch = function () {\n    $scope.clearSearchLadda = true;\n    Session.remove('search');\n    $scope.search = {};\n    $scope.updateTable();\n  };\n  $scope.filterBoxExpanded = false;\n  var search = $scope.search;\n  if (search) {\n    for (var _column2 in search) {\n      var value = search[_column2];\n      if (value && value != \"\") {\n        $scope.filterBoxExpanded = true;\n      }\n    }\n  }\n  $scope.updateFilter = function (column) {\n    Cookies.set($scope.processState + \"Filter\", $scope.displayColumn);\n    var table = $('#datatable').DataTable();\n    if (table) {\n      var tableColumn = table.column(column + \":name\");\n      if (tableColumn && tableColumn.length == 1) tableColumn.visible($scope.displayColumn[column]);\n      table.draw();\n    }\n  };\n  $scope.resendMessage = $scope.doResendMessage;\n  $scope.deleteMessage = $scope.doDeleteMessage;\n  $scope.selectAll = function () {\n    for (var i in $scope.selectedMessages) {\n      $scope.selectedMessages[i] = true;\n    }\n  };\n  $scope.unselectAll = function () {\n    for (var i in $scope.selectedMessages) {\n      $scope.selectedMessages[i] = false;\n    }\n  };\n  $scope.messagesResending = false;\n  $scope.messagesDeleting = false;\n  function getFormData() {\n    var messageIds = [];\n    for (var i in $scope.selectedMessages) {\n      if ($scope.selectedMessages[i]) {\n        messageIds.push(i);\n        $scope.selectedMessages[i] = false; //unset the messageId\n      }\n    }\n\n    var fd = new FormData();\n    fd.append(\"messageIds\", messageIds);\n    return fd;\n  }\n  $scope.resendMessages = function () {\n    var fd = getFormData();\n    if ($scope.isSelectedMessages(fd)) {\n      $scope.messagesResending = true;\n      Api.Post($scope.base_url, fd, function () {\n        $scope.messagesResending = false;\n        $scope.addNote(\"success\", \"Selected messages will be reprocessed\");\n        $scope.updateTable();\n      }, function (data) {\n        $scope.messagesResending = false;\n        $scope.addNote(\"danger\", \"Something went wrong, unable to resend all messages!\");\n        $scope.updateTable();\n      });\n    }\n  };\n  $scope.deleteMessages = function () {\n    var fd = getFormData();\n    if ($scope.isSelectedMessages(fd)) {\n      $scope.messagesDeleting = true;\n      Api.Delete($scope.base_url, fd, function () {\n        $scope.messagesDeleting = false;\n        $scope.addNote(\"success\", \"Successfully deleted messages\");\n        $scope.updateTable();\n      }, function (data) {\n        $scope.messagesDeleting = false;\n        $scope.addNote(\"danger\", \"Something went wrong, unable to delete all messages!\");\n        $scope.updateTable();\n      });\n    }\n  };\n  $scope.downloadMessages = function () {\n    var fd = getFormData();\n    if ($scope.isSelectedMessages(fd)) {\n      $scope.messagesDownloading = true;\n      Api.Post($scope.base_url + \"/messages/download\", fd, function (response) {\n        var blob = new Blob([response], {\n          type: 'application/octet-stream'\n        });\n        var downloadLink = document.createElement('a');\n        downloadLink.href = window.URL.createObjectURL(blob);\n        downloadLink.setAttribute('download', 'messages.zip');\n        document.body.appendChild(downloadLink);\n        downloadLink.click();\n        downloadLink.parentNode.removeChild(downloadLink);\n        $scope.addNote(\"success\", \"Successfully downloaded messages\");\n        $scope.messagesDownloading = false;\n      }, function (data) {\n        $scope.messagesDownloading = false;\n        $scope.addNote(\"danger\", \"Something went wrong, unable to download selected messages!\");\n      }, null, 'blob');\n    }\n  };\n  $scope.changingProcessState = false;\n  $scope.changeProcessState = function (processState, targetState) {\n    var fd = getFormData();\n    if ($scope.isSelectedMessages(fd)) {\n      $scope.changingProcessState = true;\n      Api.Post($scope.base_url + \"/move/\" + targetState, fd, function () {\n        $scope.changingProcessState = false;\n        $scope.addNote(\"success\", \"Successfully changed the state of messages to \" + targetState);\n        $scope.updateTable();\n      }, function (data) {\n        $scope.changingProcessState = false;\n        $scope.addNote(\"danger\", \"Something went wrong, unable to move selected messages!\");\n        $scope.updateTable();\n      });\n    }\n  };\n  $scope.isSelectedMessages = function (data) {\n    var selectedMessages = data.get(\"messageIds\");\n    if (!selectedMessages || selectedMessages.length == 0) {\n      SweetAlert.Warning(\"No message selected!\");\n      return false;\n    } else {\n      return true;\n    }\n  };\n}]).controller('AdapterViewStorageIdCtrl', ['$scope', 'Api', '$state', 'SweetAlert', function ($scope, Api, $state, SweetAlert) {\n  $scope.message = {};\n  $scope.closeNotes();\n  $scope.message.id = $state.params.messageId;\n  if (!$scope.message.id) return SweetAlert.Warning(\"Invalid URL\", \"No message id provided!\");\n  Api.Get($scope.base_url + \"/messages/\" + encodeURIComponent(encodeURIComponent($scope.message.id)), function (data) {\n    $scope.metadata = data;\n  }, function (errorData, statusCode, errorMsg) {\n    var error = errorData ? errorData.error : errorMsg;\n    if (statusCode == 500) {\n      SweetAlert.Warning(\"An error occured while opening the message\", \"message id [\" + $scope.message.id + \"] error [\" + error + \"]\");\n    } else {\n      SweetAlert.Warning(\"Message not found\", \"message id [\" + $scope.message.id + \"] error [\" + error + \"]\");\n    }\n    $state.go(\"pages.storage.list\", {\n      adapter: $scope.adapterName,\n      storageSource: $scope.storageSource,\n      storageSourceName: $scope.storageSourceName,\n      processState: $scope.processState\n    });\n  });\n  $scope.resendMessage = function (message) {\n    $scope.doResendMessage(message, function (messageId) {\n      //Go back to the storage list if successful\n      $state.go(\"pages.storage.list\", {\n        adapter: $scope.adapterName,\n        storageSource: $scope.storageSource,\n        storageSourceName: $scope.storageSourceName,\n        processState: $scope.processState\n      });\n    });\n  };\n  $scope.deleteMessage = function (message) {\n    $scope.doDeleteMessage(message, function (messageId) {\n      //Go back to the storage list if successful\n      $state.go(\"pages.storage.list\", {\n        adapter: $scope.adapterName,\n        storageSource: $scope.storageSource,\n        storageSourceName: $scope.storageSourceName,\n        processState: $scope.processState\n      });\n    });\n  };\n}]).controller('ConnectionOverviewCtrl', ['$scope', 'Api', function ($scope, Api) {\n  $scope.dtOptions = {\n    processing: true,\n    lengthMenu: [50, 100, 250, 500],\n    columns: [{\n      \"data\": \"adapterName\",\n      bSortable: false\n    }, {\n      \"data\": \"componentName\",\n      bSortable: false\n    }, {\n      \"data\": \"domain\",\n      bSortable: false\n    }, {\n      \"data\": \"destination\",\n      bSortable: false\n    }, {\n      \"data\": \"direction\",\n      bSortable: false\n    }],\n    sAjaxDataProp: 'data',\n    ajax: function ajax(data, callback, settings) {\n      Api.Get(\"connections\", function (response) {\n        response.draw = data.draw;\n        response.recordsTotal = response.data.length;\n        response.recordsFiltered = response.data.length;\n        callback(response);\n      });\n    },\n    initComplete: function initComplete() {\n      this.api().columns([2, 4]).every(function () {\n        var column = this;\n        var select = $('<select><option value=\"\"></option></select>').appendTo($(column.header())).on('change', function () {\n          var val = $.fn.dataTable.util.escapeRegex($(this).val());\n          column.search(val ? '^' + val + '$' : '', true, false).draw();\n        });\n        column.data().unique().sort().each(function (d, j) {\n          select.append('<option value=\"' + d + '\">' + d + '</option>');\n        });\n      });\n      this.api().columns([0, 1, 3]).every(function () {\n        var column = this;\n        $('<input type=\"text\" style=\"display:block; font-size:12px\" placeholder=\"Search...\" />').appendTo($(column.header())).on('keyup change clear', function () {\n          if (column.search() !== this.value) {\n            column.search(this.value).draw();\n          }\n        });\n      });\n    }\n  };\n}]).controller('InlineStoreOverviewCtrl', ['$scope', 'Api', function ($scope, Api) {\n  Api.Get(\"inlinestores/overview\", function (data) {\n    $scope.result = data;\n  });\n}]).controller('WebservicesCtrl', ['$scope', 'Api', 'Misc', function ($scope, Api, Misc) {\n  $scope.rootURL = Misc.getServerPath();\n  $scope.compileURL = function (apiListener) {\n    return $scope.rootURL + \"iaf/api/webservices/openapi.json?uri=\" + encodeURI(apiListener.uriPattern);\n  };\n  Api.Get(\"webservices\", function (data) {\n    $.extend($scope, data);\n  });\n}]).controller('SecurityItemsCtrl', ['$scope', 'Api', '$rootScope', function ($scope, Api, $rootScope) {\n  $scope.sapSystems = [];\n  $scope.serverProps;\n  $scope.authEntries = [];\n  $scope.jmsRealms = [];\n  $scope.securityRoles = [];\n  $scope.certificates = [];\n  for (var a in $rootScope.adapters) {\n    var adapter = $rootScope.adapters[a];\n    if (adapter.pipes) {\n      for (var p in adapter.pipes) {\n        var pipe = adapter.pipes[p];\n        if (pipe.certificate) $scope.certificates.push({\n          adapter: a,\n          pipe: p.name,\n          certificate: pipe.certificate\n        });\n      }\n    }\n  }\n  Api.Get(\"securityitems\", function (data) {\n    $.extend($scope, data);\n  });\n}]).controller('SchedulerCtrl', ['$scope', 'Api', 'Poller', '$state', 'SweetAlert', function ($scope, Api, Poller, $state, SweetAlert) {\n  $scope.jobs = {};\n  $scope.scheduler = {};\n  $scope.searchFilter = \"\";\n  Poller.add(\"schedules\", function (data) {\n    $.extend($scope, data);\n  }, true, 5000);\n  $scope.$on('$destroy', function () {\n    Poller.remove(\"schedules\");\n  });\n  $scope.start = function () {\n    Api.Put(\"schedules\", {\n      action: \"start\"\n    });\n  };\n  $scope.pauseScheduler = function () {\n    Api.Put(\"schedules\", {\n      action: \"pause\"\n    });\n  };\n  $scope.pause = function (jobGroup, jobName) {\n    Api.Put(\"schedules/\" + jobGroup + \"/jobs/\" + jobName, {\n      action: \"pause\"\n    });\n  };\n  $scope.resume = function (jobGroup, jobName) {\n    Api.Put(\"schedules/\" + jobGroup + \"/jobs/\" + jobName, {\n      action: \"resume\"\n    });\n  };\n  $scope.remove = function (jobGroup, jobName) {\n    SweetAlert.Confirm({\n      title: \"Please confirm the deletion of '\" + jobName + \"'\"\n    }, function (imSure) {\n      if (imSure) {\n        Api.Delete(\"schedules/\" + jobGroup + \"/jobs/\" + jobName);\n      }\n    });\n  };\n  $scope.trigger = function (jobGroup, jobName) {\n    Api.Put(\"schedules/\" + jobGroup + \"/jobs/\" + jobName, {\n      action: \"trigger\"\n    });\n  };\n  $scope.edit = function (jobGroup, jobName) {\n    $state.go('pages.edit_schedule', {\n      name: jobName,\n      group: jobGroup\n    });\n  };\n}]).controller('AddScheduleCtrl', ['$scope', 'Api', function ($scope, Api) {\n  $scope.state = [];\n  $scope.addLocalAlert = function (type, message) {\n    $scope.state.push({\n      type: type,\n      message: message\n    });\n  };\n  $scope.selectedConfiguration = \"\";\n  $scope.form = {\n    name: \"\",\n    group: \"\",\n    adapter: \"\",\n    listener: \"\",\n    cron: \"\",\n    interval: \"\",\n    message: \"\",\n    description: \"\",\n    locker: false,\n    lockkey: \"\"\n  };\n  $scope.submit = function () {\n    var fd = new FormData();\n    $scope.state = [];\n    fd.append(\"name\", $scope.form.name);\n    fd.append(\"group\", $scope.form.group);\n    fd.append(\"configuration\", $scope.selectedConfiguration);\n    fd.append(\"adapter\", $scope.form.adapter);\n    fd.append(\"listener\", $scope.form.listener);\n    fd.append(\"cron\", $scope.form.cron);\n    fd.append(\"interval\", $scope.form.interval);\n    fd.append(\"message\", $scope.form.message);\n    fd.append(\"description\", $scope.form.description);\n    fd.append(\"locker\", $scope.form.locker);\n    fd.append(\"lockkey\", $scope.form.lockkey);\n    Api.Post(\"schedules\", fd, function (data) {\n      $scope.addLocalAlert(\"success\", \"Successfully added schedule!\");\n      $scope.selectedConfiguration = \"\";\n      $scope.form = {\n        name: \"\",\n        group: \"\",\n        adapter: \"\",\n        listener: \"\",\n        cron: \"\",\n        interval: \"\",\n        message: \"\",\n        description: \"\",\n        locker: false,\n        lockkey: \"\"\n      };\n    }, function (errorData, status, errorMsg) {\n      var error = errorData ? errorData.error : errorMsg;\n      $scope.addLocalAlert(\"warning\", error);\n    }, false);\n  };\n}]).controller('EditScheduleCtrl', ['$scope', 'Api', '$stateParams', function ($scope, Api, $stateParams) {\n  $scope.state = [];\n  $scope.addLocalAlert = function (type, message) {\n    $scope.state.push({\n      type: type,\n      message: message\n    });\n  };\n  var url = \"schedules/\" + $stateParams.group + \"/jobs/\" + $stateParams.name;\n  $scope.editMode = true;\n  $scope.selectedConfiguration = \"\";\n  $scope.form = {\n    name: \"\",\n    group: \"\",\n    adapter: \"\",\n    listener: \"\",\n    cron: \"\",\n    interval: \"\",\n    message: \"\",\n    description: \"\",\n    locker: false,\n    lockkey: \"\"\n  };\n  Api.Get(url, function (data) {\n    $scope.selectedConfiguration = data.configuration;\n    $scope.form = {\n      name: data.name,\n      group: data.group,\n      adapter: data.adapter,\n      listener: data.listener,\n      cron: data.triggers[0].cronExpression || \"\",\n      interval: data.triggers[0].repeatInterval || \"\",\n      message: data.message,\n      description: data.description,\n      locker: data.locker,\n      lockkey: data.lockkey\n    };\n  });\n  $scope.submit = function (form) {\n    var fd = new FormData();\n    $scope.state = [];\n    fd.append(\"name\", $scope.form.name);\n    fd.append(\"group\", $scope.form.group);\n    fd.append(\"configuration\", $scope.selectedConfiguration);\n    fd.append(\"adapter\", $scope.form.adapter);\n    fd.append(\"listener\", $scope.form.listener);\n    if ($scope.form.cron) fd.append(\"cron\", $scope.form.cron);\n    if ($scope.form.interval) fd.append(\"interval\", $scope.form.interval);\n    fd.append(\"message\", $scope.form.message);\n    fd.append(\"description\", $scope.form.description);\n    fd.append(\"locker\", $scope.form.locker);\n    if ($scope.form.lockkey) fd.append(\"lockkey\", $scope.form.lockkey);\n    Api.Put(url, fd, function (data) {\n      $scope.addLocalAlert(\"success\", \"Successfully edited schedule!\");\n    }, function (errorData, status, errorMsg) {\n      var error = errorData ? errorData.error : errorMsg;\n      $scope.addLocalAlert(\"warning\", error);\n    }, false);\n  };\n}]).controller('LoggingCtrl', ['$scope', 'Api', 'Misc', '$timeout', '$state', '$stateParams', function ($scope, Api, Misc, $timeout, $state, $stateParams) {\n  $scope.viewFile = false;\n  var getFileType = function getFileType(fileName) {\n    if (fileName.indexOf('-stats_') >= 0) return 'stats';else if (fileName.indexOf('_xml.log') >= 0) return 'log4j';else if (fileName.indexOf('-stats_') >= 0 || fileName.indexOf('_xml.log') >= 0) return 'xml';else if (fileName.indexOf('-stats_') < 0 && fileName.indexOf('_xml.log') < 0) return 'html';\n  };\n  var openFile = function openFile(file) {\n    var resultType = \"\";\n    var params = \"\";\n    var as = getFileType(file.name);\n    switch (as) {\n      case \"stats\":\n        resultType = \"html\";\n        params += \"&stats=true\";\n        break;\n      case \"log4j\":\n        resultType = \"html\";\n        params += \"&log4j=true\";\n      default:\n        resultType = as;\n        break;\n    }\n    var URL = Misc.getServerPath() + \"FileViewerServlet?resultType=\" + resultType + \"&fileName=\" + Misc.escapeURL(file.path) + params;\n    if (resultType == \"xml\") {\n      window.open(URL, \"_blank\");\n      return;\n    }\n    $scope.viewFile = URL;\n    $timeout(function () {\n      var iframe = angular.element(\"iframe\");\n      iframe[0].onload = function () {\n        var iframeBody = $(iframe[0].contentWindow.document.body);\n        iframe.css({\n          \"height\": iframeBody.height() + 50\n        });\n      };\n    });\n  };\n  $scope.closeFile = function () {\n    $scope.viewFile = false;\n    $state.transitionTo('pages.logging_show', {\n      directory: $scope.directory\n    });\n  };\n  $scope.download = function (file) {\n    var url = Misc.getServerPath() + \"FileViewerServlet?resultType=bin&fileName=\" + Misc.escapeURL(file.path);\n    window.open(url, \"_blank\");\n  };\n  $scope.alert = false;\n  var openDirectory = function openDirectory(directory) {\n    var url = \"logging\";\n    if (directory) {\n      url = \"logging?directory=\" + directory;\n    }\n    Api.Get(url, function (data) {\n      $scope.alert = false;\n      $.extend($scope, data);\n      $scope.path = data.directory;\n      if (data.count > data.list.length) {\n        $scope.alert = \"Total number of items [\" + data.count + \"] exceeded maximum number, only showing first [\" + (data.list.length - 1) + \"] items!\";\n      }\n    }, function (data) {\n      $scope.alert = data ? data.error : \"An unknown error occured!\";\n    }, false);\n  };\n  $scope.open = function (file) {\n    if (file.type == \"directory\") {\n      $state.transitionTo('pages.logging_show', {\n        directory: file.path\n      });\n    } else {\n      $state.transitionTo('pages.logging_show', {\n        directory: $scope.directory,\n        file: file.name\n      }, {\n        notify: false,\n        reload: false\n      });\n    }\n  };\n\n  //This is only false when the user opens the logging page\n  var directory = $stateParams.directory && $stateParams.directory.length > 0 ? $stateParams.directory : false;\n  //The file param is only set when the user copy pastes an url in their browser\n  if ($stateParams.file && $stateParams.file.length > 0) {\n    var file = $stateParams.file;\n    $scope.directory = directory;\n    $scope.path = directory + \"/\" + file;\n    openFile({\n      path: directory + \"/\" + file,\n      name: file\n    });\n  } else {\n    openDirectory(directory);\n  }\n}]).controller('LogSettingsCtrl', ['$scope', 'Api', 'Misc', '$timeout', '$state', 'Toastr', function ($scope, Api, Misc, $timeout, $state, Toastr) {\n  $scope.updateDynamicParams = false;\n  $scope.loggers = {};\n  var logURL = \"server/logging\";\n  function updateLogInformation() {\n    Api.Get(logURL + \"/settings\", function (data) {\n      $scope.loggers = data.loggers;\n      $scope.loggersLength = Object.keys(data.loggers).length;\n      $scope.definitions = data.definitions;\n    }, function (data) {\n      console.error(data);\n    });\n  }\n  updateLogInformation();\n  $scope.errorLevels = [\"DEBUG\", \"INFO\", \"WARN\", \"ERROR\"];\n  Api.Get(logURL, function (data) {\n    $scope.form = data;\n    $scope.errorLevels = data.errorLevels;\n  });\n  $scope.form = {\n    loglevel: \"DEBUG\",\n    logIntermediaryResults: true,\n    maxMessageLength: -1,\n    errorLevels: $scope.errorLevels,\n    enableDebugger: true\n  };\n\n  //Root logger level\n  $scope.changeRootLoglevel = function (level) {\n    $scope.form.loglevel = level;\n  };\n\n  //Individual level\n  $scope.changeLoglevel = function (logger, level) {\n    Api.Put(logURL + \"/settings\", {\n      logger: logger,\n      level: level\n    }, function () {\n      Toastr.success(\"Updated logger [\" + logger + \"] to [\" + level + \"]\");\n      updateLogInformation();\n    });\n  };\n\n  //Reconfigure Log4j2\n  $scope.reconfigure = function () {\n    Api.Put(logURL + \"/settings\", {\n      reconfigure: true\n    }, function () {\n      Toastr.success(\"Reconfigured log definitions!\");\n      updateLogInformation();\n    });\n  };\n  $scope.submit = function (formData) {\n    $scope.updateDynamicParams = true;\n    Api.Put(logURL, formData, function () {\n      Api.Get(logURL, function (data) {\n        $scope.form = data;\n        $scope.updateDynamicParams = false;\n        Toastr.success(\"Successfully updated log configuration!\");\n        updateLogInformation();\n      });\n    }, function () {\n      $scope.updateDynamicParams = false;\n    });\n  };\n}]).controller('IBISstoreSummaryCtrl', ['$scope', 'Api', '$location', 'appConstants', function ($scope, Api, $location, appConstants) {\n  $scope.datasources = {};\n  $scope.form = {};\n  $scope.$on('appConstants', function () {\n    $scope.form.datasource = appConstants['jdbc.datasource.default'];\n  });\n  Api.Get(\"jdbc\", function (data) {\n    $.extend($scope, data);\n    $scope.form.datasource = appConstants['jdbc.datasource.default'] != undefined ? appConstants['jdbc.datasource.default'] : data.datasources[0];\n  });\n  if ($location.search() && $location.search().datasource != null) {\n    var datasource = $location.search().datasource;\n    fetch(datasource);\n  }\n  function fetch(datasource) {\n    Api.Post(\"jdbc/summary\", JSON.stringify({\n      datasource: datasource\n    }), function (data) {\n      $scope.error = \"\";\n      $.extend($scope, data);\n    }, function (errorData, status, errorMsg) {\n      var error = errorData ? errorData.error : errorMsg;\n      $scope.error = error;\n      $scope.result = \"\";\n    }, false);\n  }\n  $scope.submit = function (formData) {\n    if (!formData) formData = {};\n    if (!formData.datasource) formData.datasource = $scope.datasources[0] || false;\n    $location.search('datasource', formData.datasource);\n    fetch(formData.datasource);\n  };\n  $scope.reset = function () {\n    $location.search('datasource', null);\n    $scope.result = \"\";\n    $scope.error = \"\";\n  };\n}]).controller('LiquibaseScriptCtrl', ['$scope', 'Api', 'Misc', function ($scope, Api, Misc) {\n  $scope.form = {};\n  $scope.file = null;\n  var findFirstAvailabeConfiguration = function findFirstAvailabeConfiguration() {\n    for (var i in $scope.configurations) {\n      var configuration = $scope.configurations[i];\n      if (configuration.jdbcMigrator) {\n        $scope.form.configuration = configuration.name;\n        break;\n      }\n    }\n  };\n  findFirstAvailabeConfiguration();\n  $scope.$on('configurations', findFirstAvailabeConfiguration);\n  $scope.download = function () {\n    window.open(Misc.getServerPath() + \"iaf/api/jdbc/liquibase/\");\n  };\n  $scope.generateSql = false;\n  $scope.submit = function (formData) {\n    if (!formData) formData = {};\n    var fd = new FormData();\n    $scope.generateSql = true;\n    if ($scope.file != null) {\n      fd.append(\"file\", $scope.file);\n    }\n    fd.append(\"configuration\", formData.configuration);\n    Api.Post(\"jdbc/liquibase\", fd, function (returnData) {\n      $scope.error = \"\";\n      $scope.generateSql = false;\n      $.extend($scope, returnData);\n    }, function (errorData, status, errorMsg) {\n      $scope.generateSql = false;\n      var error = errorData ? errorData.error : errorMsg;\n      $scope.error = error;\n      $scope.result = \"\";\n    }, false);\n  };\n}]).controller('SendJmsMessageCtrl', ['$scope', 'Api', function ($scope, Api) {\n  $scope.destinationTypes = [\"QUEUE\", \"TOPIC\"];\n  $scope.processing = false;\n  Api.Get(\"jms\", function (data) {\n    $.extend($scope, data);\n    angular.element(\"select[name='type']\").val($scope.destinationTypes[0]);\n  });\n  $scope.file = null;\n  $scope.submit = function (formData) {\n    $scope.processing = true;\n    if (!formData) return;\n    var fd = new FormData();\n    if (formData.connectionFactory && formData.connectionFactory != \"\") fd.append(\"connectionFactory\", formData.connectionFactory);else fd.append(\"connectionFactory\", $scope.connectionFactories[0]);\n    if (formData.destination && formData.destination != \"\") fd.append(\"destination\", formData.destination);\n    if (formData.type && formData.type != \"\") fd.append(\"type\", formData.type);else fd.append(\"type\", $scope.destinationTypes[0]);\n    if (formData.replyTo && formData.replyTo != \"\") fd.append(\"replyTo\", formData.replyTo);\n    if (formData.persistent && formData.persistent != \"\") fd.append(\"persistent\", formData.persistent);\n    if (formData.synchronous && formData.synchronous != \"\") fd.append(\"synchronous\", formData.synchronous);\n    if (formData.lookupDestination && formData.lookupDestination != \"\") fd.append(\"lookupDestination\", formData.lookupDestination);\n    if (formData.propertyKey && formData.propertyKey != \"\" && formData.propertyValue && formData.propertyValue != \"\") fd.append(\"property\", formData.propertyKey + \",\" + formData.propertyValue);\n    if (formData.message && formData.message != \"\") {\n      var encoding = formData.encoding && formData.encoding != \"\" ? \";charset=\" + formData.encoding : \"\";\n      fd.append(\"message\", new Blob([formData.message], {\n        type: \"text/plain\" + encoding\n      }), 'message');\n    }\n    if ($scope.file) fd.append(\"file\", $scope.file, $scope.file.name);\n    if (formData.encoding && formData.encoding != \"\") fd.append(\"encoding\", formData.encoding);\n    if (!formData.message && !$scope.file) {\n      $scope.error = \"Please specify a file or message!\";\n      $scope.processing = false;\n      return;\n    }\n    Api.Post(\"jms/message\", fd, function (returnData) {\n      $scope.error = null;\n      $scope.processing = false;\n    }, function (errorData, status, errorMsg) {\n      $scope.processing = false;\n      errorMsg = errorMsg ? errorMsg : \"An unknown error occured, check the logs for more info.\";\n      $scope.error = errorData.error ? errorData.error : errorMsg;\n    });\n  };\n  $scope.reset = function () {\n    $scope.error = \"\";\n    if (!$scope.form) return;\n    if ($scope.form.destination) $scope.form.destination = \"\";\n    if ($scope.form.replyTo) $scope.form.replyTo = \"\";\n    if ($scope.form.message) $scope.form.message = \"\";\n    if ($scope.form.persistent) $scope.form.persistent = \"\";\n    if ($scope.form.type) $scope.form.type = $scope.destinationTypes[0];\n  };\n}]).controller('BrowseJmsQueueCtrl', ['$scope', 'Api', 'Cookies', function ($scope, Api, Cookies) {\n  $scope.destinationTypes = [\"QUEUE\", \"TOPIC\"];\n  $scope.form = {};\n  Api.Get(\"jms\", function (data) {\n    $.extend($scope, data);\n    angular.element(\"select[name='type']\").val($scope.destinationTypes[0]);\n  });\n  var browseJmsQueue = Cookies.get(\"browseJmsQueue\");\n  if (browseJmsQueue) {\n    $scope.form = browseJmsQueue;\n  }\n  $scope.messages = [];\n  $scope.numberOfMessages = -1;\n  $scope.processing = false;\n  $scope.submit = function (formData) {\n    $scope.processing = true;\n    if (!formData || !formData.destination) {\n      $scope.error = \"Please specify a connection factory and destination!\";\n      return;\n    }\n    Cookies.set(\"browseJmsQueue\", formData);\n    if (!formData.connectionFactory) formData.connectionFactory = $scope.connectionFactories[0] || false;\n    if (!formData.type) formData.type = $scope.destinationTypes[0] || false;\n    Api.Post(\"jms/browse\", JSON.stringify(formData), function (data) {\n      $.extend($scope, data);\n      if (!data.messages) {\n        $scope.messages = [];\n      }\n      $scope.error = \"\";\n      $scope.processing = false;\n    }, function (errorData, status, errorMsg) {\n      $scope.error = errorData && errorData.error ? errorData.error : errorMsg;\n      $scope.processing = false;\n    });\n  };\n  $scope.reset = function () {\n    $scope.error = \"\";\n    if (!$scope.form) return;\n    if ($scope.form.destination) $scope.form.destination = \"\";\n    if ($scope.form.rowNumbersOnly) $scope.form.rowNumbersOnly = \"\";\n    if ($scope.form.type) $scope.form.type = $scope.destinationTypes[0];\n    $scope.messages = [];\n    $scope.numberOfMessages = -1;\n    $scope.processing = false;\n  };\n}]).controller('ExecuteJdbcQueryCtrl', ['$scope', 'Api', '$timeout', '$state', 'Cookies', 'appConstants', function ($scope, Api, $timeout, $state, Cookies, appConstants) {\n  $scope.datasources = {};\n  $scope.resultTypes = {};\n  $scope.error = \"\";\n  $scope.processingMessage = false;\n  $scope.form = {};\n  $scope.$on('appConstants', function () {\n    $scope.form.datasource = appConstants['jdbc.datasource.default'];\n  });\n  var executeQueryCookie = Cookies.get(\"executeQuery\");\n  Api.Get(\"jdbc\", function (data) {\n    $.extend($scope, data);\n    $scope.form.datasource = appConstants['jdbc.datasource.default'] != undefined ? appConstants['jdbc.datasource.default'] : data.datasources[0];\n    $scope.form.queryType = data.queryTypes[0];\n    $scope.form.resultType = data.resultTypes[0];\n    if (executeQueryCookie) {\n      $scope.form.query = executeQueryCookie.query;\n      if (data.datasources.indexOf(executeQueryCookie.datasource) !== -1) {\n        $scope.form.datasource = executeQueryCookie.datasource;\n      }\n      $scope.form.resultType = executeQueryCookie.resultType;\n    }\n  });\n  $scope.submit = function (formData) {\n    $scope.processingMessage = true;\n    if (!formData || !formData.query) {\n      $scope.error = \"Please specify a datasource, resulttype and query!\";\n      $scope.processingMessage = false;\n      return;\n    }\n    if (!formData.datasource) formData.datasource = $scope.datasources[0] || false;\n    if (!formData.resultType) formData.resultType = $scope.resultTypes[0] || false;\n    Cookies.set(\"executeQuery\", formData);\n    Api.Post(\"jdbc/query\", JSON.stringify(formData), function (returnData) {\n      $scope.error = \"\";\n      if (returnData == undefined || returnData == \"\") {\n        returnData = \"Ok\";\n      }\n      $scope.result = returnData;\n      $scope.processingMessage = false;\n    }, function (errorData, status, errorMsg) {\n      var error = errorData && errorData.error ? errorData.error : \"An error occured!\";\n      $scope.error = error;\n      $scope.result = \"\";\n      $scope.processingMessage = false;\n    }, false);\n  };\n  $scope.reset = function () {\n    $scope.form.query = \"\";\n    $scope.result = \"\";\n    $scope.form.datasource = $scope.datasources[0];\n    $scope.form.resultType = $scope.resultTypes[0];\n    $scope.form.avoidLocking = false;\n    $scope.form.trimSpaces = false;\n    Cookies.remove(\"executeQuery\");\n  };\n}]).controller('BrowseJdbcTablesCtrl', ['$scope', 'Api', '$timeout', '$state', 'appConstants', function ($scope, Api, $timeout, $state, appConstants) {\n  $scope.datasources = {};\n  $scope.resultTypes = {};\n  $scope.error = \"\";\n  $scope.processingMessage = false;\n  $scope.form = {};\n  $scope.$on('appConstants', function () {\n    $scope.form.datasource = appConstants['jdbc.datasource.default'];\n  });\n  Api.Get(\"jdbc\", function (data) {\n    $scope.datasources = data.datasources;\n    $scope.form.datasource = appConstants['jdbc.datasource.default'] != undefined ? appConstants['jdbc.datasource.default'] : data.datasources[0];\n  });\n  $scope.submit = function (formData) {\n    $scope.processingMessage = true;\n    if (!formData || !formData.table) {\n      $scope.error = \"Please specify a datasource and table name!\";\n      $scope.processingMessage = false;\n      return;\n    }\n    if (!formData.datasource) formData.datasource = $scope.datasources[0] || false;\n    if (!formData.resultType) formData.resultType = $scope.resultTypes[0] || false;\n    $scope.columnNames = [{}];\n    var columnNameArray = [];\n    $scope.result = [];\n    Api.Post(\"jdbc/browse\", JSON.stringify(formData), function (returnData) {\n      $scope.error = \"\";\n      $scope.query = returnData.query;\n      var i = 0;\n      for (var x in returnData.fielddefinition) {\n        $scope.columnNames.push({\n          id: i++,\n          name: x,\n          desc: returnData.fielddefinition[x]\n        });\n        columnNameArray.push(x);\n      }\n      for (var _x4 in returnData.result) {\n        var row = returnData.result[_x4];\n        var orderedRow = [];\n        for (var columnName in row) {\n          var index = columnNameArray.indexOf(columnName);\n          var value = row[columnName];\n          if (index == -1 && columnName.indexOf(\"LENGTH \") > -1) {\n            value += \" (length)\";\n            index = columnNameArray.indexOf(columnName.replace(\"LENGTH \", \"\"));\n          }\n          orderedRow[index] = value;\n        }\n        $scope.result.push(orderedRow);\n      }\n      $scope.processingMessage = false;\n    }, function (errorData) {\n      var error = errorData.error ? errorData.error : \"\";\n      $scope.error = error;\n      $scope.query = \"\";\n      $scope.processingMessage = false;\n    }, false);\n  };\n  $scope.reset = function () {\n    $scope.query = \"\";\n    $scope.error = \"\";\n  };\n}]).controller('ShowMonitorsCtrl', ['$scope', 'Api', '$state', 'Misc', function ($scope, Api, $state, Misc) {\n  $scope.selectedConfiguration = null;\n  $scope.monitors = [];\n  $scope.destinations = [];\n  $scope.eventTypes = [];\n  $scope.changeConfiguration = function (name) {\n    $scope.selectedConfiguration = name;\n    if ($state.params.configuration == \"\" || $state.params.configuration != name) {\n      //Update the URL\n      $state.transitionTo('pages.monitors', {\n        configuration: name\n      }, {\n        notify: false,\n        reload: false\n      });\n    }\n    update();\n  };\n  $scope.totalRaised = 0;\n  function update() {\n    Api.Get(\"configurations/\" + $scope.selectedConfiguration + \"/monitors\", function (data) {\n      $.extend($scope, data);\n      $scope.totalRaised = 0;\n      for (var i in $scope.monitors) {\n        if ($scope.monitors[i].raised) $scope.totalRaised++;\n        var monitor = $scope.monitors[i];\n        monitor.activeDestinations = [];\n        for (var j in $scope.destinations) {\n          var destination = $scope.destinations[j];\n          monitor.activeDestinations[destination] = monitor.destinations.indexOf(destination) > -1;\n        }\n      }\n    });\n  }\n\n  //Wait for the 'configurations' field to be populated to change the monitoring page\n  $scope.$watch('configurations', function (configs) {\n    if (configs) {\n      var configName = $state.params.configuration; //See if the configuration query param is populated\n      if (!configName) configName = configs[0].name; //Fall back to the first configuration\n      $scope.changeConfiguration(configName); //Update the view\n    }\n  });\n\n  function getUrl(monitor, trigger) {\n    var url = \"configurations/\" + $scope.selectedConfiguration + \"/monitors/\" + monitor.name;\n    if (trigger != undefined && trigger != \"\") url += \"/triggers/\" + trigger.id;\n    return url;\n  }\n  $scope.raise = function (monitor) {\n    Api.Put(getUrl(monitor), {\n      action: \"raise\"\n    }, function () {\n      update();\n    });\n  };\n  $scope.clear = function (monitor) {\n    Api.Put(getUrl(monitor), {\n      action: \"clear\"\n    }, function () {\n      update();\n    });\n  };\n  $scope.edit = function (monitor) {\n    var destinations = [];\n    for (var dest in monitor.activeDestinations) {\n      if (monitor.activeDestinations[dest]) {\n        destinations.push(dest);\n      }\n    }\n    Api.Put(getUrl(monitor), {\n      action: \"edit\",\n      name: monitor.displayName,\n      type: monitor.type,\n      destinations: destinations\n    }, function () {\n      update();\n    });\n  };\n  $scope.deleteMonitor = function (monitor) {\n    Api.Delete(getUrl(monitor), function () {\n      update();\n    });\n  };\n  $scope.deleteTrigger = function (monitor, trigger) {\n    Api.Delete(getUrl(monitor, trigger), function () {\n      update();\n    });\n  };\n  $scope.downloadXML = function (monitorName) {\n    var url = Misc.getServerPath() + \"iaf/api/configurations/\" + $scope.selectedConfiguration + \"/monitors\";\n    if (monitorName) {\n      url += \"/\" + monitorName;\n    }\n    window.open(url + \"?xml=true\", \"_blank\");\n  };\n}]).controller('EditMonitorsCtrl', ['$scope', 'Api', '$state', function ($scope, Api, $state) {\n  $scope.loading = true;\n  $scope.$on('loading', function () {\n    $scope.loading = false;\n  });\n  $scope.selectedConfiguration = null;\n  $scope.monitor = \"\";\n  $scope.events = \"\";\n  $scope.severities = [];\n  $scope.triggerId = \"\";\n  $scope.trigger = {\n    type: \"Alarm\",\n    filter: \"none\",\n    events: []\n  };\n  var url;\n  if ($state.params.configuration == \"\" || $state.params.monitor == \"\") {\n    $state.go('pages.monitors');\n  } else {\n    $scope.selectedConfiguration = $state.params.configuration;\n    $scope.monitor = $state.params.monitor;\n    $scope.triggerId = $state.params.trigger || \"\";\n    url = \"configurations/\" + $scope.selectedConfiguration + \"/monitors/\" + $scope.monitor + \"/triggers/\" + $scope.triggerId;\n    Api.Get(url, function (data) {\n      $.extend($scope, data);\n      calculateEventSources();\n      if (data.trigger && data.trigger.sources) {\n        var sources = data.trigger.sources;\n        $scope.trigger.sources = [];\n        $scope.trigger.adapters = [];\n        for (var adapter in sources) {\n          if (data.trigger.filter == \"source\") {\n            for (var i in sources[adapter]) {\n              $scope.trigger.sources.push(adapter + \"$$\" + sources[adapter][i]);\n            }\n          } else {\n            $scope.trigger.adapters.push(adapter);\n          }\n        }\n      }\n    }, function () {\n      $state.go('pages.monitors', $state.params);\n    });\n  }\n  $scope.getAdaptersForEvents = function (events) {\n    if (!events) return [];\n    var adapters = [];\n    for (var eventName in $scope.events) {\n      if (events.indexOf(eventName) > -1) {\n        var arr = $scope.events[eventName].adapters;\n        adapters = adapters.concat(arr);\n      }\n    }\n    return Array.from(new Set(adapters));\n  };\n  $scope.eventSources = [];\n  function calculateEventSources() {\n    for (var eventCode in $scope.events) {\n      var retVal = [];\n      var eventSources = $scope.events[eventCode].sources;\n      for (var adapter in eventSources) {\n        for (var i in eventSources[adapter]) {\n          retVal.push({\n            adapter: adapter,\n            source: eventSources[adapter][i]\n          });\n        }\n      }\n      $scope.eventSources[eventCode] = retVal;\n    }\n  }\n  $scope.getSourceForEvents = function (events) {\n    var retval = [];\n    for (var i in events) {\n      var eventCode = events[i];\n      retval = retval.concat($scope.eventSources[eventCode]);\n    }\n    return retval;\n  };\n  $scope.submit = function (trigger) {\n    if (trigger.filter == \"adapter\") {\n      delete trigger.sources;\n    } else if (trigger.filter == \"source\") {\n      delete trigger.adapters;\n      var sources = trigger.sources;\n      trigger.sources = {};\n      for (var i in sources) {\n        var s = sources[i].split(\"$$\");\n        var adapter = s[0];\n        var source = s[1];\n        if (!trigger.sources[adapter]) trigger.sources[adapter] = [];\n        trigger.sources[adapter].push(source);\n      }\n    }\n    if ($scope.triggerId && $scope.triggerId > -1) {\n      Api.Put(url, trigger, function (returnData) {\n        $state.go('pages.monitors', $state.params);\n      });\n    } else {\n      Api.Post(url, JSON.stringify(trigger), function (returnData) {\n        $state.go('pages.monitors', $state.params);\n      });\n    }\n  };\n}]).controller('TestPipelineCtrl', ['$scope', 'Api', 'Alert', function ($scope, Api, Alert) {\n  $scope.state = [];\n  $scope.file = null;\n  $scope.selectedConfiguration = \"\";\n  $scope.addNote = function (type, message, removeQueue) {\n    $scope.state.push({\n      type: type,\n      message: message\n    });\n  };\n  $scope.processingMessage = false;\n  $scope.sessionKeyIndex = 1;\n  $scope.sessionKeyIndices = [$scope.sessionKeyIndex];\n  var sessionKeys = [];\n  $scope.updateSessionKeys = function (sessionKey, index) {\n    var sessionKeyIndex = sessionKeys.findIndex(function (f) {\n      return f.index === index;\n    }); // find by index\n    if (sessionKeyIndex >= 0) {\n      if (sessionKey.name == \"\" && sessionKey.value == \"\") {\n        // remove row if row is empty\n        sessionKeys.splice(sessionKeyIndex, 1);\n        $scope.sessionKeyIndices.splice(sessionKeyIndex, 1);\n      } else {\n        // update existing key value pair\n        sessionKeys[sessionKeyIndex].key = sessionKey.name;\n        sessionKeys[sessionKeyIndex].value = sessionKey.value;\n      }\n      $scope.state = [];\n    } else if (sessionKey.name && sessionKey.name != \"\" && sessionKey.value && sessionKey.value != \"\") {\n      var keyIndex = sessionKeys.findIndex(function (f) {\n        return f.key === sessionKey.name;\n      }); // find by key\n      // add new key\n      if (keyIndex < 0) {\n        $scope.sessionKeyIndex += 1;\n        $scope.sessionKeyIndices.push($scope.sessionKeyIndex);\n        sessionKeys.push({\n          index: index,\n          key: sessionKey.name,\n          value: sessionKey.value\n        });\n        $scope.state = [];\n      } else {\n        // key with the same name already exists show warning\n        if ($scope.state.findIndex(function (f) {\n          return f.message === \"Session keys cannot have the same name!\";\n        }) < 0)\n          //avoid adding it more than once\n          $scope.addNote(\"warning\", \"Session keys cannot have the same name!\");\n      }\n    }\n  };\n  $scope.submit = function (formData) {\n    $scope.result = \"\";\n    $scope.state = [];\n    if (!formData && $scope.selectedConfiguration == \"\") {\n      $scope.addNote(\"warning\", \"Please specify a configuration\");\n      return;\n    }\n    var fd = new FormData();\n    fd.append(\"configuration\", $scope.selectedConfiguration);\n    if (formData && formData.adapter && formData.adapter != \"\") {\n      fd.append(\"adapter\", formData.adapter);\n    } else {\n      $scope.addNote(\"warning\", \"Please specify an adapter!\");\n      return;\n    }\n    if (formData.encoding && formData.encoding != \"\") fd.append(\"encoding\", formData.encoding);\n    if (formData.message && formData.message != \"\") {\n      var encoding = formData.encoding && formData.encoding != \"\" ? \";charset=\" + formData.encoding : \"\";\n      fd.append(\"message\", new Blob([formData.message], {\n        type: \"text/plain\" + encoding\n      }), 'message');\n    }\n    if ($scope.file) fd.append(\"file\", $scope.file, $scope.file.name);\n    if (sessionKeys.length > 0) {\n      var incompleteKeyIndex = sessionKeys.findIndex(function (f) {\n        return f.key === \"\" || f.value === \"\";\n      });\n      if (incompleteKeyIndex < 0) {\n        fd.append(\"sessionKeys\", JSON.stringify(sessionKeys));\n      } else {\n        $scope.addNote(\"warning\", \"Please make sure all sessionkeys have name and value!\");\n        return;\n      }\n    }\n    $scope.processingMessage = true;\n    Api.Post(\"test-pipeline\", fd, function (returnData) {\n      var warnLevel = \"success\";\n      if (returnData.state == \"ERROR\") warnLevel = \"danger\";\n      $scope.addNote(warnLevel, returnData.state);\n      $scope.result = returnData.result;\n      $scope.processingMessage = false;\n      if ($scope.file != null) {\n        angular.element(\".form-file\")[0].value = null;\n        $scope.file = null;\n        formData.message = returnData.message;\n      }\n    }, function (errorData) {\n      var error = errorData && errorData.error ? errorData.error : \"An error occured!\";\n      $scope.result = \"\";\n      $scope.addNote(\"warning\", error);\n      $scope.processingMessage = false;\n    });\n  };\n}]).controller('TestServiceListenerCtrl', ['$scope', 'Api', 'Alert', function ($scope, Api, Alert) {\n  $scope.state = [];\n  $scope.file = null;\n  $scope.addNote = function (type, message, removeQueue) {\n    $scope.state.push({\n      type: type,\n      message: message\n    });\n  };\n  $scope.processingMessage = false;\n  Api.Get(\"test-servicelistener\", function (data) {\n    $scope.services = data.services;\n  });\n  $scope.submit = function (formData) {\n    $scope.result = \"\";\n    $scope.state = [];\n    if (!formData) {\n      $scope.addNote(\"warning\", \"Please specify a service and message!\");\n      return;\n    }\n    var fd = new FormData();\n    if (formData.service && formData.service != \"\") fd.append(\"service\", formData.service);\n    if (formData.encoding && formData.encoding != \"\") fd.append(\"encoding\", formData.encoding);\n    if (formData.message && formData.message != \"\") {\n      var encoding = formData.encoding && formData.encoding != \"\" ? \";charset=\" + formData.encoding : \"\";\n      fd.append(\"message\", new Blob([formData.message], {\n        type: \"text/plain\" + encoding\n      }), 'message');\n    }\n    if ($scope.file) fd.append(\"file\", $scope.file, $scope.file.name);\n    if (!formData.message && !$scope.file) {\n      $scope.addNote(\"warning\", \"Please specify a file or message!\");\n      return;\n    }\n    $scope.processingMessage = true;\n    Api.Post(\"test-servicelistener\", fd, function (returnData) {\n      var warnLevel = \"success\";\n      if (returnData.state == \"ERROR\") warnLevel = \"danger\";\n      $scope.addNote(warnLevel, returnData.state);\n      $scope.result = returnData.result;\n      $scope.processingMessage = false;\n    }, function (returnData) {\n      $scope.result = returnData.result;\n      $scope.processingMessage = false;\n    });\n  };\n}]);\n\n//# sourceURL=webpack://gui/./js/controllers.js?");

/***/ }),

/***/ "./js/directives.js":
/*!**************************!*\
  !*** ./js/directives.js ***!
  \**************************/
/***/ (() => {

eval("function parseStateRef(ref, current) {\n  var preparsed = ref.match(/^\\s*({[^}]*})\\s*$/),\n    parsed;\n  if (preparsed) ref = current + '(' + preparsed[1] + ')';\n  parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\n  if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");\n  return {\n    state: parsed[1],\n    paramExpr: parsed[3] || null\n  };\n}\nangular.module('iaf.beheerconsole').directive('pageTitle', ['$rootScope', '$timeout', '$state', '$transitions', 'Debug', function ($rootScope, $timeout, $state, $transitions, Debug) {\n  return {\n    link: function link(scope, element) {\n      var listener = function listener() {\n        var toState = $state.current;\n        Debug.info(\"state change\", toState);\n        var title = 'Loading...'; // Default title\n        if (toState.data && toState.data.pageTitle && $rootScope.instanceName) title = $rootScope.dtapStage + '-' + $rootScope.instanceName + ' | ' + toState.data.pageTitle;else if ($rootScope.startupError) title = \"ERROR\";\n        $timeout(function () {\n          element.text(title);\n        });\n      };\n      $transitions.onSuccess({}, listener); //Fired on every state change\n      $rootScope.$watch('::instanceName', listener); //Fired once, once the instance name is known.\n    }\n  };\n}]).directive('toDate', ['dateFilter', 'appConstants', function (dateFilter, appConstants) {\n  return {\n    restrict: 'A',\n    scope: {\n      time: '@'\n    },\n    link: function link(scope, element, attributes) {\n      var watch = scope.$watch('time', updateTime);\n      function updateTime(time) {\n        if (!time) return;\n        if (isNaN(time)) time = new Date(time).getTime();\n        var toDate = new Date(time - appConstants.timeOffset);\n        element.text(dateFilter(toDate, appConstants[\"console.dateFormat\"]));\n        watch();\n      }\n    }\n  };\n}]).directive('formatCode', ['$location', '$timeout', function ($location, $timeout) {\n  return {\n    restrict: 'A',\n    link: function link($scope, element, attributes) {\n      var code = document.createElement('code');\n      element.addClass(\"line-numbers\");\n      element.addClass(\"language-markup\");\n      element.append(code);\n      var watch = $scope.$watch(attributes.formatCode, function (text) {\n        if (text && text != '') {\n          angular.element(code).text(text);\n          Prism.highlightElement(code);\n          addOnClickEvent(code);\n\n          // If hash anchor has been set upon init\n          var hash = $location.hash();\n          var el = angular.element(\"#\" + hash);\n          if (el) {\n            el.addClass(\"line-selected\");\n            var lineNumber = Math.max(0, parseInt(hash.substr(1)) - 15);\n            $timeout(function () {\n              var lineElement = angular.element(\"#L\" + lineNumber)[0];\n              if (lineElement) {\n                lineElement.scrollIntoView();\n              }\n            }, 500);\n          }\n        } else if (text === '') {\n          angular.element(code).text(text);\n        }\n      });\n      function addOnClickEvent(root) {\n        var spanElements = $(root).children(\"span.line-numbers-rows\").children(\"span\");\n        spanElements.on(\"click\", function () {\n          //Update the anchor\n          var target = $(event.target);\n          target.parent().children(\".line-selected\").removeClass(\"line-selected\");\n          var anchor = target.attr('id');\n          target.addClass(\"line-selected\");\n          $location.hash(anchor);\n        });\n      }\n      element.on('$destroy', function () {\n        watch();\n      });\n    }\n  };\n}]).directive('clipboard', function () {\n  return {\n    restrict: 'A',\n    controller: [\"$scope\", \"$element\", \"$compile\", function controller($scope, $element, $compile) {\n      var selector = angular.element('<i ng-click=\"copyToClipboard()\" title=\"copy to clipboard\" class=\"fa fa-clipboard\" aria-hidden=\"true\"></i>');\n      $element.append(selector);\n      $element.addClass(\"clipboard\");\n      $compile(selector)($scope);\n      $scope.copyToClipboard = function () {\n        var textToCopy = $element.text().trim();\n        if (textToCopy) {\n          var el = document.createElement('textarea');\n          el.value = textToCopy;\n          el.setAttribute('readonly', '');\n          el.style.position = 'absolute';\n          el.style.left = '-9999px';\n          document.body.appendChild(el);\n          el.select();\n          document.execCommand('copy');\n          document.body.removeChild(el);\n        }\n      };\n    }]\n  };\n}).directive('uiLref', ['$state', '$location', '$timeout', function ($state, $location, $timeout) {\n  return {\n    link: function link(scope, element, attributes) {\n      var ref = parseStateRef(attributes.uiLref, $state.current.name);\n      var params;\n      if (ref.paramExpr) {\n        params = angular.copy(scope.$eval(ref.paramExpr));\n      }\n      var transition = null;\n      element.bind(\"click\", function () {\n        if (transition) {\n          $timeout.cancel(transition);\n        }\n        var adapter = scope.adapter;\n        if (adapter) {\n          $timeout(function () {\n            $location.hash(adapter.name);\n          });\n        }\n        transition = $timeout(function () {\n          $state.go(ref.state, params);\n        }, 5);\n      });\n    }\n  };\n}]).directive('backButton', function () {\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attrs) {\n      element.bind('click', goBack);\n      function goBack() {\n        history.back();\n        scope.$apply();\n      }\n    }\n  };\n}).directive('flow', ['Misc', '$http', '$uibModal', function (Misc, $http, $uibModal) {\n  return {\n    restrict: 'E',\n    transclude: true,\n    scope: {\n      adapter: '='\n    },\n    link: function link(scope) {\n      var adapter = scope.adapter;\n      var uri = Misc.getServerPath() + 'iaf/api/configurations/' + adapter.configuration + '/adapters/' + Misc.escapeURL(adapter.name) + \"/flow?\" + adapter.upSince;\n      scope.flow = {\n        \"image\": null,\n        \"url\": uri\n      };\n      $http.get(uri).then(function (data) {\n        var status = data && data.status ? data.status : 204;\n        if (status == 200) {\n          var contentType = data.headers(\"Content-Type\");\n          scope.flow.image = contentType.indexOf(\"image\") > 0 || contentType.indexOf(\"svg\") > 0; //display an image or a button to open a modal\n          if (!scope.flow.image) {\n            //only store metadata when required\n            data.adapter = adapter;\n            scope.flow.data = data;\n          }\n        } else {\n          //If non successfull response, force no-image-available\n          scope.flow.image = true;\n          scope.flow.url = 'images/no_image_available.svg';\n        }\n      });\n      scope.openFlowModal = function (_xhr) {\n        scope.flowModalLadda = true;\n        $uibModal.open({\n          templateUrl: 'views/flow-modal.html',\n          windowClass: 'mermaidFlow',\n          resolve: {\n            loadPlugin: [\"lazyLoader\", function loadPlugin(lazyLoader) {\n              lazyLoader.load('mermaid');\n              return lazyLoader.load('./js/plugins/mermaid/ng-mermaid.js');\n            }],\n            xhr: function xhr() {\n              return _xhr;\n            }\n          },\n          controller: 'FlowDiagramModalCtrl'\n        });\n        setTimeout(function () {\n          scope.flowModalLadda = false;\n        }, 1000);\n      };\n    },\n    template: '<a ng-if=\"flow.image === true\" ng-href=\"{{flow.url}}\" target=\"_blank\"><img ng-src=\"{{flow.url}}\" alt=\"Flow Diagram\"></a><button ng-if=\"flow.image === false\" ladda=\"flowModalLadda\" ng-click=\"openFlowModal(flow.data)\" title=\"Generate Flow Diagram\" class=\"btn btn-xs btn-info\" type=\"button\"><i class=\"fa fa-share-alt-square\"></i> Flow Diagram</button>'\n  };\n}]).directive('timeSince', ['appConstants', '$interval', function (appConstants, $interval) {\n  return {\n    restrict: 'A',\n    scope: {\n      time: '@'\n    },\n    link: function link(scope, element, attributes) {\n      function updateTime() {\n        if (!attributes.time) return;\n        var seconds = Math.round((new Date().getTime() - attributes.time + appConstants.timeOffset) / 1000);\n        var minutes = seconds / 60;\n        seconds = Math.floor(seconds % 60);\n        if (minutes < 1) {\n          return element.text(seconds + 's');\n        }\n        var hours = minutes / 60;\n        minutes = Math.floor(minutes % 60);\n        if (hours < 1) {\n          return element.text(minutes + 'm');\n        }\n        var days = hours / 24;\n        hours = Math.floor(hours % 24);\n        if (days < 1) {\n          return element.text(hours + 'h');\n        }\n        days = Math.floor(days);\n        return element.text(days + 'd');\n      }\n      var timeout = $interval(updateTime, 300000);\n      element.on('$destroy', function () {\n        $interval.cancel(timeout);\n      });\n      scope.$watch('time', updateTime);\n    }\n  };\n}]).directive('inputFileUpload', function () {\n  return {\n    restrict: 'E',\n    transclude: true,\n    replace: true,\n    link: function link(scope, element) {\n      element.bind(\"change\", function () {\n        scope.handleFile(this.files);\n      });\n      scope.handleFile = function (files) {\n        if (files.length == 0) {\n          scope.file = null;\n          return;\n        }\n        scope.file = files[0]; //Can only parse 1 file!\n      };\n    },\n\n    template: '<input class=\"form-control form-file\" name=\"file\" type=\"file\" />'\n  };\n}).directive('quickSubmitForm', function () {\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attributes) {\n      var map = Array();\n      element.bind(\"keydown keyup\", function (event) {\n        if (event.which == 13 || event.which == 17) map[event.keyCode] = event.type == 'keydown';\n        if (map[13] && map[17]) {\n          scope.$apply(function () {\n            scope.$eval(attributes.quickSubmitForm);\n          });\n        }\n      });\n    }\n  };\n}).directive('sideNavigation', ['$timeout', function ($timeout) {\n  return {\n    restrict: 'A',\n    link: function link(scope, element) {\n      // Call the metisMenu plugin and plug it to sidebar navigation\n      $timeout(function () {\n        element.metisMenu();\n      });\n    }\n  };\n}]).directive('customViews', ['appConstants', function (appConstants) {\n  return {\n    restrict: 'E',\n    replace: true,\n    link: function link(scope, element, attributes) {\n      scope.customViews = [];\n      scope.$on('appConstants', function () {\n        var customViews = appConstants[\"customViews.names\"];\n        if (customViews == undefined) return;\n        if (customViews.length > 0) {\n          var views = customViews.split(\",\");\n          for (i in views) {\n            var viewId = views[i];\n            var name = appConstants[\"customViews.\" + viewId + \".name\"];\n            var url = appConstants[\"customViews.\" + viewId + \".url\"];\n            if (name && url) scope.customViews.push({\n              view: viewId,\n              name: name,\n              url: url\n            });\n          }\n        }\n      });\n    },\n    template: '<li ng-repeat=\"view in customViews\" ui-sref-active=\"active\">' + '<a ui-sref=\"pages.customView(view)\"><i class=\"fa fa-desktop\"></i> <span class=\"nav-label\">{{view.name}}</span></a>' + '</li>'\n  };\n}]).directive('iboxToolsClose', ['$timeout', function ($timeout) {\n  return {\n    restrict: 'A',\n    scope: true,\n    templateUrl: 'views/common/ibox_tools_close.html',\n    controller: [\"$scope\", \"$element\", function controller($scope, $element) {\n      $scope.closebox = function () {\n        var ibox = $element.closest('div.ibox');\n        ibox.remove();\n      };\n    }]\n  };\n}]).service('Sidebar', function () {\n  this.toggle = function () {\n    $(\"body\").toggleClass(\"mini-navbar\");\n    if (!$('body').hasClass('mini-navbar') || $('body').hasClass('body-small')) {\n      // Hide menu in order to smoothly turn on when maximize menu\n      $('#side-menu').hide();\n      // For smoothly turn on menu\n      setTimeout(function () {\n        $('#side-menu').fadeIn(400);\n      }, 200);\n    } else if ($('body').hasClass('fixed-sidebar')) {\n      $('#side-menu').hide();\n      setTimeout(function () {\n        $('#side-menu').fadeIn(400);\n      }, 100);\n    } else {\n      // Remove all inline style from jquery fadeIn function to reset menu state\n      $('#side-menu').removeAttr('style');\n    }\n  };\n}).directive('minimalizaSidebar', ['Sidebar', function (Sidebar) {\n  return {\n    restrict: 'A',\n    template: '<a class=\"navbar-minimalize minimalize\" href=\"\" ng-click=\"toggleSidebar()\"><i class=\"fa left fa-angle-double-left\"></i><i class=\"fa right fa-angle-double-right\"></i></a>',\n    controller: [\"$scope\", \"$element\", function controller($scope, $element) {\n      $scope.toggleSidebar = function () {\n        Sidebar.toggle();\n      };\n    }]\n  };\n}]).directive('hamburger', ['Sidebar', function (Sidebar) {\n  return {\n    restrict: 'A',\n    template: '<a class=\"hamburger btn btn-primary \" href=\"\" ng-click=\"toggleSidebar()\"><i class=\"fa fa-bars\"></i></a>',\n    controller: [\"$scope\", \"$element\", function controller($scope, $element) {\n      $scope.toggleSidebar = function () {\n        Sidebar.toggle();\n      };\n    }]\n  };\n}]).directive('fitHeight', function () {\n  return {\n    restrict: 'A',\n    link: function link($scope, element) {\n      $scope.height = {\n        topnavbar: 0,\n        topinfobar: 0,\n        window: 0,\n        min: 800\n      };\n      function fitHeight() {\n        var offset = $scope.height.topnavbar + $scope.height.topinfobar;\n        var height = ($scope.height.window > $scope.height.min ? $scope.height.window : $scope.height.min) - offset;\n        element.css(\"height\", height + \"px\");\n        element.css(\"min-height\", height + \"px\");\n      }\n      $scope.$watch(function () {\n        return $(window).height();\n      }, function (newValue) {\n        if (!newValue) return;\n        $scope.height.window = newValue;\n        fitHeight();\n      });\n      $scope.$watch(function () {\n        return $('nav.navbar-default').height();\n      }, function (newValue) {\n        if (!newValue) return;\n        $scope.height.min = newValue;\n        fitHeight();\n      });\n      $scope.$watch(function () {\n        return $('.topnavbar').height();\n      }, function (newValue) {\n        if (!newValue) return;\n        $scope.height.topnavbar = newValue;\n        fitHeight();\n      });\n      $scope.$watch(function () {\n        return $('.topinfobar').height();\n      }, function (newValue) {\n        if (!newValue) return;\n        $scope.height.topinfobar = newValue;\n        fitHeight();\n      });\n      fitHeight();\n    }\n  };\n}).directive('scrollToTop', function () {\n  return {\n    restrict: 'A',\n    replace: true,\n    template: '<div class=\"scroll-to-top\"><a title=\"Scroll to top\" ng-click=\"scrollTop()\"><i class=\"fa fa-arrow-up\"></i> <span class=\"nav-label\">Scroll To Top</span></a></div>',\n    controller: [\"$scope\", function controller($scope) {\n      $scope.scrollTop = function () {\n        $(window).scrollTop(0);\n      };\n    }]\n  };\n}).directive('icheck', ['$timeout', '$parse', function ($timeout, $parse) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function link($scope, element, $attrs, ngModel) {\n      return $timeout(function () {\n        var value = $attrs['value'];\n        $scope.$watch($attrs['ngModel'], function (newValue) {\n          $(element).iCheck('update');\n        });\n        return $(element).iCheck({\n          checkboxClass: 'icheckbox_square-green',\n          radioClass: 'iradio_square-green'\n        }).on('ifChanged', function (event) {\n          if ($(element).attr('type') === 'checkbox' && $attrs['ngModel']) {\n            $scope.$apply(function () {\n              return ngModel.$setViewValue(event.target.checked);\n            });\n          }\n          if ($(element).attr('type') === 'radio' && $attrs['ngModel']) {\n            return $scope.$apply(function () {\n              return ngModel.$setViewValue(value);\n            });\n          }\n        });\n      });\n    }\n  };\n}]).directive('icheckRadius', ['$timeout', '$parse', function ($timeout, $parse) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function link($scope, element, $attrs, ngModel) {\n      return $timeout(function () {\n        $scope.$watch($attrs['ngModel'], function (newValue) {\n          $(element).iCheck('update');\n        });\n        return $(element).iCheck({\n          checkboxClass: 'iradio_square-green'\n        }).on('ifChanged', function (event) {\n          if ($(element).attr('type') === 'checkbox' && $attrs['ngModel']) {\n            $scope.$apply(function () {\n              return ngModel.$setViewValue(event.target.checked);\n            });\n          }\n        });\n      });\n    }\n  };\n}]);\n\n//# sourceURL=webpack://gui/./js/directives.js?");

/***/ }),

/***/ "./js/loaderModule.js":
/*!****************************!*\
  !*** ./js/loaderModule.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"loaderModule\": () => (/* binding */ loaderModule)\n/* harmony export */ });\nlazySystem.$inject = [\"$ocLazyLoad\"];\nfunction lazySystem($ocLazyLoad) {\n  function load(src, key) {\n    return __webpack_require__(\"./js lazy recursive\")(src).then(function (loadedFile) {\n      return $ocLazyLoad.load(loadedFile[key || 'default']);\n    });\n  }\n  this.load = load;\n}\nvar loaderModule = angular.module('loaderModule', ['oc.lazyLoad']).config(['$ocLazyLoadProvider'], function config($ocLazyLoadProvider) {\n  $ocLazyLoadProvider.config({\n    debug: true\n  });\n}).service('lazyLoader', lazySystem);\n\n\n//# sourceURL=webpack://gui/./js/loaderModule.js?");

/***/ }),

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery-exposed.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prismjs */ \"./node_modules/prismjs/prism.js\");\n/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prismjs__WEBPACK_IMPORTED_MODULE_1__);\n\n\nif (location.hostname != \"localhost\") {\n  window.console.log(\"%cThis is a browser feature intended for developers. Do not paste any code here given to you by someone else. It may compromise your account or have other negative side effects.\", \"font-weight: bold; font-size: 14px;\");\n}\nconsole.time(\"startup\");\nconsole.time(\"documentReady\");\n\n/* Main.js */\njquery__WEBPACK_IMPORTED_MODULE_0___default()(document).ready(function () {\n  console.timeEnd(\"documentReady\");\n  console.log(\"Launching GUI!\");\n\n  // Full height of sidebar\n  function fix_height_func() {\n    var navbarHeight = jquery__WEBPACK_IMPORTED_MODULE_0___default()('nav.navbar-default').height();\n    var wrapperHeight = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#page-wrapper').height();\n    if (navbarHeight <= wrapperHeight && jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).height() > navbarHeight) {\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()('#page-wrapper').css(\"min-height\", jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).height() + \"px\");\n    } else {\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()('#page-wrapper').css(\"min-height\", navbarHeight + \"px\");\n    }\n  }\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on(\"resize scroll\", function () {\n    if (!jquery__WEBPACK_IMPORTED_MODULE_0___default()(\"body\").hasClass('body-small')) {\n      fix_height();\n    }\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on(\"load\", function () {\n    if (!jquery__WEBPACK_IMPORTED_MODULE_0___default()(\"body\").hasClass('body-small')) {\n      fix_height(500);\n    }\n  });\n  function fix_height(time) {\n    if (!time) time = 50;\n    setTimeout(function () {\n      fix_height_func();\n    }, time);\n  }\n  window.addEventListener(\"keydown\", function (e) {\n    if (e.which == 70 && (e.ctrlKey || e.metaKey) && e.shiftKey) {\n      var searchbar = document.getElementById(\"searchbar\");\n      if (searchbar) {\n        e.preventDefault();\n        searchbar.getElementsByTagName(\"input\")[0].focus();\n      }\n    }\n  });\n});\n\n//Foist: To force upon or impose fraudulently or unjustifiably\nfunction foist(callback) {\n  angular.element(document.body).scope().foist(callback);\n}\n//Changes the log level to; 0 - error, 1 - warn, 2 - info, 3 - debug\nfunction setLogLevel(level) {\n  angular.element(document.body).scope().setLogLevel(level);\n}\n//Detect if using any (older) version of Internet Explorer\nif (navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > -1) {\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()(\"body\").prepend(\"<h2 style='text-align: center; color: #fdc300;'><strong>Internet Explorer 11 and older do not support XHR requests, the Frank!Console might not load correctly!</strong><br/>Please open this website in MS Edge, Mozilla Firefox or Google Chrome.</h2>\");\n}\n\n// Automatically minimalize menu when screen is less than 768px\njquery__WEBPACK_IMPORTED_MODULE_0___default()(function () {\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on(\"load resize\", function () {\n    if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).width() < 769) {\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()(\"body\").addClass(\"body-small\");\n    } else {\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()(\"body\").removeClass(\"body-small\");\n    }\n  });\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on(\"scroll\", function () {\n    var scroll2top = jquery__WEBPACK_IMPORTED_MODULE_0___default()(\".scroll-to-top\").stop(true);\n    if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).scrollTop() > 100) {\n      if (parseInt(scroll2top.css(\"opacity\")) === 0) {\n        scroll2top.animate({\n          \"opacity\": 1,\n          \"z-index\": 10000\n        }, 50, \"linear\");\n      }\n    } else {\n      scroll2top.animate({\n        \"opacity\": 0,\n        \"z-index\": -1\n      }, 50, \"linear\");\n    }\n  });\n  prismjs__WEBPACK_IMPORTED_MODULE_1___default().hooks.add('after-highlight', function (env) {\n    // works only for <code> wrapped inside <pre data-line-numbers> (not inline)\n    var pre = env.element.parentNode;\n    if (!pre || !/pre/i.test(pre.nodeName) || pre.className.indexOf('line-numbers') === -1) {\n      return;\n    }\n    var linesNum = env.code.split('\\n').length;\n    var lineNumbersWrapper;\n    var lines = new Array(linesNum);\n    //See https://stackoverflow.com/questions/1295584/most-efficient-way-to-create-a-zero-filled-javascript-array\n    for (var i = 0; i < linesNum; ++i) lines[i] = '<span id=\"L' + (i + 1) + '\"></span>';\n    lineNumbersWrapper = document.createElement('span');\n    lineNumbersWrapper.className = 'line-numbers-rows';\n    lineNumbersWrapper.innerHTML = lines.join(\"\");\n    env.element.appendChild(lineNumbersWrapper);\n  });\n});\n\n//# sourceURL=webpack://gui/./js/main.js?");

/***/ }),

/***/ "./js/services.js":
/*!************************!*\
  !*** ./js/services.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var tinycon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tinycon */ \"./node_modules/tinycon/tinycon.js\");\n/* harmony import */ var tinycon__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tinycon__WEBPACK_IMPORTED_MODULE_0__);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nangular.module('iaf.beheerconsole').service('Api', ['$http', 'appConstants', 'Misc', 'Session', 'Debug', function ($http, appConstants, Misc, Session, Debug) {\n  var absolutePath = Misc.getServerPath();\n  absolutePath += \"iaf/api/\";\n  var etags = {};\n  var allowed = {};\n  function buildURI(uri) {\n    return absolutePath + uri;\n  }\n  $http.defaults.headers.post[\"Content-Type\"] = \"application/json\";\n  $http.defaults.timeout = appConstants[\"console.pollerInterval\"] - 1000;\n  this.Get = function (uri, callback, error, httpOptions, intercept) {\n    var defaultHttpOptions = {\n      headers: {},\n      intercept: intercept\n    };\n    if (httpOptions) {\n      //If httpOptions is TRUE, skip additional/custom settings, if it's an object, merge both objects\n      if (_typeof(httpOptions) == \"object\") {\n        angular.merge(defaultHttpOptions, defaultHttpOptions, httpOptions);\n        if (!httpOptions.poller) {\n          Debug.log(\"Sending request to uri [\" + uri + \"] using HttpOptions \", defaultHttpOptions);\n        }\n      }\n    }\n    if (etags.hasOwnProperty(uri)) {\n      //If not explicitly disabled (httpOptions==false), check eTag\n      var tag = etags[uri];\n      defaultHttpOptions.headers['If-None-Match'] = tag;\n    }\n    return $http.get(buildURI(uri), defaultHttpOptions).then(function (response) {\n      if (callback && typeof callback === 'function') {\n        if (response.headers(\"etag\")) {\n          etags[uri] = response.headers(\"etag\");\n        }\n        if (response.headers(\"allow\")) {\n          allowed[uri] = response.headers(\"allow\");\n        }\n        callback(response.data);\n      }\n    })[\"catch\"](function (response) {\n      errorException(response, error);\n    });\n  };\n  this.Post = function () {\n    // uri, object, callback, error, intercept 4xx errors\n    var args = Array.prototype.slice.call(arguments);\n    var uri = args.shift();\n    var object = args.shift() || {};\n    var headers = {};\n    if (object instanceof FormData) {\n      headers = {\n        'Content-Type': undefined\n      }; //Unset default contentType when posting formdata\n    }\n\n    var callback = args.shift();\n    var error = args.shift();\n    var intercept = args.shift();\n    var responseType = args.shift();\n    return $http.post(buildURI(uri), object, {\n      headers: headers,\n      responseType: responseType,\n      transformRequest: angular.identity,\n      intercept: intercept\n    }).then(function (response) {\n      if (callback && typeof callback === 'function') {\n        etags[uri] = response.headers(\"etag\");\n        callback(response.data);\n      }\n    })[\"catch\"](function (response) {\n      errorException(response, error);\n    });\n  };\n  this.Put = function (uri, object, callback, error, intercept) {\n    var headers = {};\n    var data = {};\n    if (object != null) {\n      if (object instanceof FormData) {\n        data = object;\n        headers[\"Content-Type\"] = undefined;\n      } else {\n        data = JSON.stringify(object);\n        headers[\"Content-Type\"] = \"application/json\";\n      }\n    }\n    var intercept = intercept;\n    return $http.put(buildURI(uri), data, {\n      headers: headers,\n      transformRequest: angular.identity,\n      intercept: intercept\n    }).then(function (response) {\n      if (callback && typeof callback === 'function') {\n        etags[uri] = response.headers(\"etag\");\n        callback(response.data);\n      }\n    })[\"catch\"](function (response) {\n      errorException(response, error);\n    });\n  };\n  this.Delete = function () {\n    // uri, callback, error || uri, object, callback, error\n    var args = Array.prototype.slice.call(arguments);\n    var uri = args.shift();\n    var request = {\n      url: buildURI(uri),\n      method: \"delete\",\n      headers: {}\n    };\n    var callback;\n    var object = args.shift(); // this can be a function or an object.\n    if (object instanceof Function) {\n      //we have a callback function, that means no object is present!\n      callback = object; // set the callback method accordingly\n    } else {\n      if (object instanceof FormData) {\n        request.data = object;\n        request.headers[\"Content-Type\"] = undefined;\n      } else {\n        request.data = JSON.stringify(object);\n        request.headers[\"Content-Type\"] = \"application/json\";\n      }\n      callback = args.shift(); // the previous argument was an object, that means the next object is the callback!\n    }\n\n    var error = args.shift();\n    request.intercept = args.shift();\n    return $http(request).then(function (response) {\n      if (callback && typeof callback === 'function') {\n        etags[uri] = response.headers(\"etag\");\n        callback(response.data);\n      }\n    })[\"catch\"](function (response) {\n      errorException(response, error);\n    });\n  };\n  var errorException = function errorException(response, callback) {\n    if (response.status != 304) {\n      var status = response.status > 0 ? \" \" + response.status + \" error\" : \"n unknown error\";\n      if (response.status == 404 || response.status == 500) {\n        var config = response.config;\n        var debug = \" url[\" + config.url + \"] method[\" + config.method + \"]\";\n        if (config.data && config.data != \"\") debug += \" data[\" + config.data + \"]\";\n        Debug.warn(\"A\" + status + \" occurred, please notify a system administrator!\" + '\\n' + debug);\n      } else {\n        Debug.info(\"A\" + status + \" occured.\", response);\n      }\n      if (response.status != 304 && callback && typeof callback === 'function') {\n        callback(response.data, response.status, response.statusText);\n      }\n    }\n  };\n\n  //Getters\n  this.errorException = errorException;\n  this.absolutePath = absolutePath;\n  this.etags = etags;\n  this.flushCache = function () {\n    etags = {};\n  };\n}]).service('Poller', ['Api', 'appConstants', 'Debug', function (Api, appConstants, Debug) {\n  var data = {};\n  this.createPollerObject = function (uri, callback) {\n    this.uri = uri;\n    this.waiting = true;\n    this.pollerInterval = appConstants[\"console.pollerInterval\"];\n    this.fired = 0;\n    this.errorList = [];\n    this.addError = function () {\n      this.errorList.push({\n        time: new Date().getTime(),\n        fired: this.fired\n      });\n      if (this.errorList.length > 10) this.errorList.shift();\n    };\n    this.getLastError = function () {\n      return this.errorList[this.errorList.length - 1];\n    };\n    this.ai = {\n      list: [],\n      avg: 0,\n      push: function push(obj) {\n        this.list.push(obj);\n        if (this.list.length == 5) {\n          var tmp = 0;\n          for (var i = this.list.length - 1; i >= 0; i--) {\n            tmp += this.list[i];\n          }\n          this.avg = Math.round(tmp / this.list.length / 100) * 100;\n          this.list = [];\n          return this.avg;\n        }\n      }\n    };\n    this.started = function () {\n      return this.poller ? true : false;\n    };\n    this.stop = function () {\n      if (!this.started()) return;\n      this.ai.list = [];\n      this.ai.avg = 0;\n      if (this.waiting) clearTimeout(this.poller);else clearInterval(this.poller);\n      this.waiting = true;\n      delete this.poller;\n    };\n    this.fn = function (runOnce) {\n      var runOnce = !!runOnce;\n      var poller = data[uri];\n      poller.fired++;\n      Api.Get(uri, callback, function () {\n        poller.addError();\n        var e = 0;\n        for (var x in poller.errorList) {\n          var y = poller.errorList[x];\n          if (poller.fired == y.fired || poller.fired - 1 == y.fired || poller.fired - 2 == y.fired) e++;\n        }\n        Debug.info(\"Encountered unhandled exception, poller[\" + uri + \"] eventId[\" + poller.fired + \"] retries[\" + e + \"]\");\n        if (e < 3) return;\n        Debug.warn(\"Max retries reached. Stopping poller [\" + uri + \"]\", poller);\n        runOnce = true;\n        data[uri].stop();\n      }, {\n        poller: true\n      }).then(function () {\n        if (runOnce) return;\n        var p = data[uri];\n        if (p && p.waiting) p.start();\n      });\n    };\n    this.run = function () {\n      this.fn(true);\n    };\n    this.start = function () {\n      if (this.started() && !this.waiting) return;\n      if (this.waiting) {\n        var now = new Date().getTime();\n        if (this.lastPolled) {\n          var timeBetweenLastPolledAndNow = now - this.lastPolled;\n          var interval = this.ai.push(timeBetweenLastPolledAndNow);\n          if (interval > 0 && interval > this.pollerInterval) {\n            this.setInterval(interval, false);\n            this.waitForResponse(false);\n            return;\n          }\n        }\n        this.poller = setTimeout(this.fn, this.pollerInterval);\n        this.lastPolled = now;\n      } else this.poller = setInterval(this.fn, this.pollerInterval);\n    };\n    this.setInterval = function (interval, restart) {\n      var restart = !restart || restart === false ? false : true;\n      Debug.info(\"Interval for \" + this.uri + \" changed to [\" + interval + \"] restart [\" + restart + \"]\");\n      this.pollerInterval = interval;\n      if (restart) this.restart();\n    };\n    this.waitForResponse = function (bool) {\n      this.stop();\n      delete this.lastPolled;\n      this.waiting = !!bool;\n      if (bool != this.waiting) Debug.info(\"waitForResponse for \" + this.uri + \" changed to: \" + bool);\n      this.start();\n    };\n    this.restart = function () {\n      this.stop();\n      this.start();\n    };\n  }, this.changeInterval = function (uri, interval) {\n    data[uri].waitForResponse(true);\n    data[uri].setInterval(interval, false);\n  }, this.add = function (uri, callback, autoStart, interval) {\n    if (!data[uri]) {\n      Debug.log(\"Adding new poller [\" + uri + \"] autoStart [\" + !!autoStart + \"] interval [\" + interval + \"]\");\n      var poller = new this.createPollerObject(uri, callback);\n      data[uri] = poller;\n      if (!!autoStart) poller.fn();\n      if (interval && interval > 1500) poller.setInterval(interval);\n      return poller;\n    }\n  }, this.remove = function (uri) {\n    if (data[uri]) {\n      data[uri].stop();\n      delete data[uri];\n    }\n  }, this.get = function (uri) {\n    return data[uri];\n  }, this.getAll = function () {\n    var args = arguments || [];\n    if (args.length > 0 && typeof args[0] == \"function\") {\n      var callback = args[0];\n      for (var x in data) {\n        callback.apply(this, [data[x]]);\n      }\n    }\n    return {\n      changeInterval: function changeInterval(interval) {\n        var i = interval || appConstants[\"console.pollerInterval\"];\n        for (var _x in data) data[_x].setInterval(i, false);\n      },\n      start: function start() {\n        Debug.info(\"starting all Pollers\");\n        for (var _x2 in data) data[_x2].fn();\n      },\n      stop: function stop() {\n        Debug.info(\"stopping all Pollers\");\n        for (var _x3 in data) data[_x3].stop();\n      },\n      remove: function remove() {\n        Debug.info(\"removing all Pollers\");\n        for (var _x4 in data) {\n          data[_x4].stop();\n          delete data[_x4];\n        }\n        data = {};\n      },\n      list: function list() {\n        this.list = [];\n        for (var uri in data) {\n          this.list.push(uri);\n        }\n        return this.list;\n      }\n    };\n  };\n}]).service('Notification', ['$rootScope', '$timeout', function ($rootScope, $timeout) {\n  tinycon__WEBPACK_IMPORTED_MODULE_0___default().setOptions({\n    background: '#f03d25'\n  });\n  this.list = [];\n  this.count = 0;\n  this.add = function (icon, title, msg, fn) {\n    var obj = {\n      icon: icon,\n      title: title,\n      message: msg ? msg : false,\n      fn: fn ? fn : false,\n      time: new Date().getTime()\n    };\n    this.list.unshift(obj);\n    obj.id = this.list.length;\n    this.count++;\n    tinycon__WEBPACK_IMPORTED_MODULE_0___default().setBubble(this.count);\n  };\n  this.get = function (id) {\n    for (var i = 0; i < this.list.length; i++) {\n      var notification = this.list[i];\n      if (notification.id == id) {\n        if (notification.fn) {\n          $timeout(function () {\n            notification.fn.apply(this, notification);\n          }, 50);\n        }\n        return notification;\n      }\n    }\n    return false;\n  };\n  this.resetCount = function () {\n    tinycon__WEBPACK_IMPORTED_MODULE_0___default().setBubble(0);\n    this.count = 0;\n  };\n  this.getCount = function () {\n    return this.count;\n  };\n  this.getLatest = function (amount) {\n    if (amount < 1) amount = 1;\n    return this.list.slice(0, amount);\n  };\n}]).service('Cookies', ['Debug', '$cookies', 'GDPR', '$rootScope', function (Debug, $cookies, GDPR, $rootScope) {\n  this.cache = null;\n  this.addToCache = function (key, value) {\n    Debug.log(\"adding cookie[\" + key + \"] to cache\");\n    if (this.cache == null) this.cache = {};\n\n    //If the same key is set twice, just overwrite the old setting\n    this.cache[key] = value;\n  };\n  this.flushCache = function () {\n    Debug.info(\"trying to save cookies from cache\", this.cache);\n    if (GDPR.allowFunctional() === true) {\n      //Only run when explicitly set to true\n      for (var c in this.cache) {\n        this.set(c, this.cache[c]);\n      }\n      this.cache = null; //Clear the cache, free up memory :)\n    }\n  };\n\n  //Runs everytime the GDPR settings update\n  var Cookies = this;\n  $rootScope.$on('GDPR', function () {\n    Cookies.flushCache();\n  });\n  var date = new Date();\n  date.setDate(date.getDate() + 7);\n  this.options = {\n    expires: date,\n    path: '/'\n  };\n  this.get = function (key) {\n    var val = null;\n    if (this.cache != null)\n      //Maybe a cookie has been set but the user has not accepted cookies?\n      val = this.cache[key];\n    if (val == null) val = $cookies.getObject(key);\n    return val;\n  };\n  this.set = function (key, value) {\n    if (GDPR.allowFunctional()) $cookies.putObject(key, value, this.options); //Only actually set the cookie when allowed to\n    else this.addToCache(key, value); //Cache the request while the user hasn't selected their preference or disallowed functional cookies\n  };\n\n  this.remove = function (key) {\n    $cookies.remove(key, {\n      path: '/'\n    });\n  };\n  this.clear = function () {\n    for (var key in $cookies.getAll()) {\n      if (!key.startsWith(\"_\")) this.remove(key);\n    }\n  };\n}]).service('Session', ['Debug', function (Debug) {\n  this.get = function (key) {\n    //Debug.log(key, sessionStorage.getItem(key), sessionStorage.getItem(key) == null, sessionStorage.getItem(key) == \"null\");\n    return JSON.parse(sessionStorage.getItem(key));\n  };\n  this.set = function (key, value) {\n    sessionStorage.setItem(key, JSON.stringify(value));\n  };\n  this.remove = function (key) {\n    sessionStorage.removeItem(key);\n  };\n  this.clear = function () {\n    sessionStorage.clear();\n  };\n}]).service('GDPR', ['$cookies', '$rootScope', 'Debug', function ($cookies, $rootScope, Debug) {\n  this.settings = null;\n  this.defaults = {\n    necessary: true,\n    functional: true,\n    personalization: true\n  };\n  var date = new Date();\n  date.setFullYear(date.getFullYear() + 10);\n  this.cookieName = \"_cookieSettings\";\n  this.options = {\n    expires: date,\n    path: '/'\n  };\n  this.showCookie = function () {\n    this.getSettings();\n    return this.settings == null;\n  };\n  this.getSettings = function () {\n    if (this.settings == null) {\n      var cookie = $cookies.getObject(this.cookieName);\n      if (cookie != undefined) {\n        Debug.log(\"fetch cookie with GDPR settings\", cookie);\n        this.settings = cookie;\n\n        //Extend the cookie lifetime by another 10 years\n        $cookies.putObject(this.cookieName, cookie, this.options);\n      } else {\n        Debug.log(\"unable to find GDPR settings, falling back to defaults\", this.defaults);\n        return this.defaults;\n      }\n      Debug.info(\"set GDPR settings to\", this.settings);\n    }\n    return this.settings;\n  };\n  this.allowFunctional = function () {\n    return this.getSettings().functional;\n  };\n  this.allowPersonalization = function () {\n    return this.getSettings().personalization;\n  };\n  this.setSettings = function (settings) {\n    this.settings = settings;\n    $cookies.putObject(this.cookieName, settings, this.options);\n    $rootScope.$broadcast('GDPR');\n  };\n}]).service('Debug', function () {\n  var level = 0; //ERROR\n  var levelEnums = [\"ERROR\", \"WARN\", \"INFO\", \"DEBUG\"];\n  var inGroup = false;\n  this.getLevel = function () {\n    return level;\n  };\n  this.setLevel = function (l) {\n    l = Math.min(3, Math.max(0, l));\n    if (l == level) return;\n    console.info(this.head() + \" Setting LOG level to [\" + levelEnums[l] + \"]\");\n    level = l;\n  };\n  this.head = function (level) {\n    var d = new Date();\n    var date = ('0' + d.getUTCDate()).slice(-2) + \"-\" + ('0' + d.getUTCMonth()).slice(-2) + \"-\" + d.getUTCFullYear();\n    date += \" \" + ('0' + d.getSeconds()).slice(-2) + \":\" + ('0' + d.getMinutes()).slice(-2) + \":\" + ('0' + d.getHours()).slice(-2);\n    if (level != undefined) return date + \" [\" + levelEnums[level] + \"] -\";else return date + \" -\";\n  };\n  this.log = function () {\n    if (level < 3) return;\n    var args = arguments || [];\n    var func = window.console.log;\n    if (!inGroup) Array.prototype.unshift.call(args, this.head(3));\n    try {\n      func.apply(window.console, args);\n    } catch (e) {\n      for (var a in args) console.log(args[a]);\n    }\n    ;\n  };\n  this.group = function () {\n    var args = arguments || [];\n    var title = Array.prototype.shift.call(args);\n    inGroup = true;\n    window.console.group(this.head() + \" \" + title);\n    if (args.length > 0) {\n      //Loop through args and close group after...\n      for (var a in args) console.log(args[a]);\n      this.groupEnd();\n    }\n  };\n  this.groupEnd = function () {\n    inGroup = false;\n    window.console.groupEnd();\n  };\n  this.info = function () {\n    if (level < 2) return;\n    var args = arguments || [];\n    var func = window.console.info;\n    if (!inGroup) Array.prototype.unshift.call(args, this.head(2));\n    try {\n      func.apply(window.console, args);\n    } catch (e) {\n      for (var a in args) console.info(args[a]);\n    }\n    ;\n  };\n  this.warn = function (a) {\n    if (level < 1) return;\n    var args = arguments || [];\n    var func = window.console.warn;\n    if (!inGroup) Array.prototype.unshift.call(args, this.head(1));\n    try {\n      func.apply(window.console, args);\n    } catch (e) {\n      for (var a in args) console.warn(args[a]);\n    }\n    ;\n  };\n  this.error = function (a) {\n    var args = arguments || [];\n    var func = window.console.error;\n    if (!inGroup) Array.prototype.unshift.call(args, this.head(0));\n    try {\n      func.apply(window.console, args);\n    } catch (e) {\n      for (var a in args) console.error(args[a]);\n    }\n    ;\n  };\n}).service('SweetAlert', ['Debug', function (Debug) {\n  this.defaultSettings = {\n    //\t\t\tconfirmButtonColor: \"#449d44\"\n  };\n  this.defaults = function () {\n    var args = arguments || [];\n    var options = angular.copy(this.defaultSettings);\n    if (args.length == 0 || args.length > 2) Debug.error(\"Invalid argument length specified for SweetAlert.\");\n\n    //expects (String, String) or (JsonObject, Function)\n    if (_typeof(args[0]) == \"object\") {\n      angular.merge(options, options, args[0]);\n      if (args.length == 2 && typeof args[1] == \"function\") {\n        options.callback = args[1];\n      }\n    } else if (typeof args[0] == \"string\") {\n      options.title = args[0];\n      if (args.length == 2 && typeof args[1] == \"string\") {\n        options.text = args[1];\n      }\n    }\n    return options; //var [options, callback] = this.defaults.apply(this, arguments);\n  };\n\n  this.Input = function () {\n    var options = this.defaults.apply(this, arguments);\n    if (options.input == undefined) options.input = \"text\";\n    options.showCancelButton = true;\n    return swal(options);\n  };\n  this.Confirm = function () {\n    //(JsonObject, Callback)-> returns boolean\n    var options = {\n      title: \"Are you sure?\",\n      showCancelButton: true\n    };\n    angular.merge(options, options, this.defaults.apply(this, arguments));\n    return swal(options, options.callback);\n  };\n  this.Info = function () {\n    var options = {};\n    angular.merge(options, {\n      type: \"info\"\n    }, this.defaults.apply(this, arguments));\n    return swal(options, options.callback);\n  };\n  this.Warning = function () {\n    var options = {};\n    angular.merge(options, {\n      type: \"warning\"\n    }, this.defaults.apply(this, arguments));\n    return swal(options, options.callback);\n  };\n  this.Error = function () {\n    var options = {};\n    angular.merge(options, {\n      type: \"error\"\n    }, this.defaults.apply(this, arguments));\n    return swal(options, options.callback);\n  };\n  this.Success = function () {\n    var options = {};\n    angular.merge(options, {\n      type: \"success\"\n    }, this.defaults.apply(this, arguments));\n    return swal(options, options.callback);\n  };\n}]).service('Hooks', ['$rootScope', '$timeout', function ($rootScope, $timeout) {\n  this.call = function () {\n    $rootScope.callHook.apply(this, arguments);\n    //$rootScope.$broadcast.apply(this, arguments);\n  };\n\n  this.register = function () {\n    $rootScope.registerHook.apply(this, arguments);\n    //$rootScope.$on.apply(this, arguments);\n  };\n}]).run([\"$rootScope\", \"$timeout\", function ($rootScope, $timeout) {\n  $rootScope.hooks = [];\n  $rootScope.callHook = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var name = args.shift();\n    //when this is called execute:\n    $timeout(function () {\n      if ($rootScope.hooks.hasOwnProperty(name)) {\n        var hooks = $rootScope.hooks[name];\n        for (var id in hooks) {\n          hooks[id].apply(this, args);\n          if (id == \"once\") {\n            $rootScope.removeHook(name, id);\n          }\n        }\n      }\n      /*\n      else {\n      \tconsole.warn(\"Hook: '\" + name + \"' does not exist!\");\n      }*/\n    }, 50);\n  };\n  $rootScope.registerHook = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var name = args.shift();\n    var id = 0;\n    if (name.indexOf(\":\") > -1) {\n      id = name.substring(name.indexOf(\":\") + 1);\n      name = name.substring(0, name.indexOf(\":\"));\n    }\n    var callback = args.shift();\n    if (!$rootScope.hooks.hasOwnProperty(name)) $rootScope.hooks[name] = [];\n    if ($rootScope.hooks[name].hasOwnProperty(id)) {\n      console.warn(\"Tried to redefine the same hook twice...\");\n    } else {\n      $rootScope.hooks[name][id] = callback;\n    }\n  };\n  $rootScope.removeHook = function (name, id) {\n    if (name != null && id != null) delete $rootScope.hooks[name][id];\n  };\n}]).filter('ucfirst', function () {\n  return function (s) {\n    return angular.isString(s) && s.length > 0 ? s[0].toUpperCase() + s.substr(1).toLowerCase() : s;\n  };\n}).filter('truncate', function () {\n  return function (input, length) {\n    if (input && input.length > length) {\n      return input.substring(0, length) + \"... (\" + (input.length - length) + \" characters more)\";\n    }\n    return input;\n  };\n}).filter('dropLastChar', function () {\n  return function (input) {\n    if (input && input.length > 0) {\n      return input.substring(0, input.length - 1);\n    }\n    return input;\n  };\n}).filter('markDown', function () {\n  return function (input) {\n    if (!input) return;\n    input = input.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\n    input = input.replace(/\\[(.*?)\\]\\((.+?)\\)/g, '<a target=\"_blank\" href=\"$2\" alt=\"$1\">$1</a>');\n    return input;\n  };\n}).filter('withJavaListener', function () {\n  return function (adapters) {\n    if (!adapters) return;\n    var schedulerEligibleAdapters = {};\n    for (var adapter in adapters) {\n      var receivers = adapters[adapter].receivers;\n      for (var r in receivers) {\n        var receiver = receivers[r];\n        if (receiver.listener[\"class\"].startsWith('JavaListener')) {\n          schedulerEligibleAdapters[adapter] = adapters[adapter];\n        }\n      }\n    }\n    return schedulerEligibleAdapters;\n  };\n}).filter('dash', function () {\n  return function (input) {\n    if (input || input === 0) return input;else return \"-\";\n  };\n}).filter('perc', function () {\n  return function (input) {\n    if (input || input === 0) return input + \"%\";else return \"-\";\n  };\n}).filter('formatStatistics', function () {\n  return function (input, format) {\n    if (!input || !format) return; //skip when no input\n    var formatted = {};\n    for (var key in format) {\n      var value = input[key];\n      if (!value && value !== 0) {\n        // if no value, return a dash\n        value = \"-\";\n      }\n      if ((key.endsWith(\"ms\") || key.endsWith(\"B\")) && value != \"-\") {\n        value += \"%\";\n      }\n      formatted[key] = value;\n    }\n    formatted[\"$$hashKey\"] = input[\"$$hashKey\"]; //Copy the hashKey over so Angular doesn't trigger another digest cycle\n    return formatted;\n  };\n}).factory('authService', ['$rootScope', '$http', 'Base64', '$location', 'appConstants', 'Misc', function ($rootScope, $http, Base64, $location, appConstants, Misc) {\n  var authToken;\n  return {\n    login: function login(username, password) {\n      if (username != \"anonymous\") {\n        authToken = Base64.encode(username + ':' + password);\n        sessionStorage.setItem('authToken', authToken);\n        $http.defaults.headers.common['Authorization'] = 'Basic ' + authToken;\n      }\n      var location = sessionStorage.getItem('location') || \"status\";\n      var absUrl = window.location.href.split(\"login\")[0];\n      window.location.href = absUrl + location;\n      window.location.reload();\n    },\n    loggedin: function loggedin() {\n      var token = sessionStorage.getItem('authToken');\n      if (token != null && token != \"null\") {\n        $http.defaults.headers.common['Authorization'] = 'Basic ' + token;\n        if ($location.path().indexOf(\"login\") >= 0) $location.path(sessionStorage.getItem('location') || \"status\");\n      } else {\n        if (appConstants.init > 0) {\n          if ($location.path().indexOf(\"login\") < 0) sessionStorage.setItem('location', $location.path() || \"status\");\n          $location.path(\"login\");\n        }\n      }\n    },\n    logout: function logout() {\n      sessionStorage.clear();\n      $http.defaults.headers.common['Authorization'] = null;\n      $http.get(Misc.getServerPath() + \"iaf/api/logout\");\n    }\n  };\n}]).factory('Base64', function () {\n  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n  return {\n    encode: function encode(input) {\n      var output = \"\";\n      var chr1,\n        chr2,\n        chr3 = \"\";\n      var enc1,\n        enc2,\n        enc3,\n        enc4 = \"\";\n      var i = 0;\n      do {\n        chr1 = input.charCodeAt(i++);\n        chr2 = input.charCodeAt(i++);\n        chr3 = input.charCodeAt(i++);\n        enc1 = chr1 >> 2;\n        enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n        enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n        enc4 = chr3 & 63;\n        if (isNaN(chr2)) {\n          enc3 = enc4 = 64;\n        } else if (isNaN(chr3)) {\n          enc4 = 64;\n        }\n        output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\n        chr1 = chr2 = chr3 = \"\";\n        enc1 = enc2 = enc3 = enc4 = \"\";\n      } while (i < input.length);\n      return output;\n    },\n    decode: function decode(input) {\n      var output = \"\";\n      var chr1,\n        chr2,\n        chr3 = \"\";\n      var enc1,\n        enc2,\n        enc3,\n        enc4 = \"\";\n      var i = 0;\n\n      // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n      var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n      if (base64test.exec(input)) {\n        console.error(\"There were invalid base64 characters in the input text.\\n\" + \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\\n\" + \"Expect errors in decoding.\");\n      }\n      input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n      do {\n        enc1 = keyStr.indexOf(input.charAt(i++));\n        enc2 = keyStr.indexOf(input.charAt(i++));\n        enc3 = keyStr.indexOf(input.charAt(i++));\n        enc4 = keyStr.indexOf(input.charAt(i++));\n        chr1 = enc1 << 2 | enc2 >> 4;\n        chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n        chr3 = (enc3 & 3) << 6 | enc4;\n        output = output + String.fromCharCode(chr1);\n        if (enc3 != 64) {\n          output = output + String.fromCharCode(chr2);\n        }\n        if (enc4 != 64) {\n          output = output + String.fromCharCode(chr3);\n        }\n        chr1 = chr2 = chr3 = \"\";\n        enc1 = enc2 = enc3 = enc4 = \"\";\n      } while (i < input.length);\n      return output;\n    }\n  };\n}).service('Misc', ['appConstants', 'Base64', function (appConstants, Base64) {\n  this.getServerPath = function () {\n    var absolutePath = appConstants.server;\n    if (absolutePath && absolutePath.slice(-1) != \"/\") absolutePath += \"/\";\n    return absolutePath;\n  };\n  this.escapeURL = function (uri) {\n    return encodeURIComponent(uri);\n  };\n  this.isMobile = function () {\n    return navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i) ? true : false;\n  };\n  this.getUID = function (serverInfo) {\n    var queryObj = {\n      \"v\": serverInfo.framework.version,\n      \"n\": serverInfo.instance.name,\n      \"s\": serverInfo[\"dtap.stage\"]\n    };\n    var b = Base64.encode(JSON.stringify(queryObj));\n    var chunks = [];\n    var pos = 0;\n    while (pos < b.length) {\n      chunks.push(b.slice(pos, pos += 5));\n    }\n    return chunks.reverse().join(\"\");\n  };\n  this.compare_version = function (v1, v2, operator) {\n    // See for more info: http://locutus.io/php/info/version_compare/\n\n    var i,\n      x,\n      compare = 0;\n    var vm = {\n      'dev': -6,\n      'alpha': -5,\n      'a': -5,\n      'beta': -4,\n      'b': -4,\n      'RC': -3,\n      'rc': -3,\n      '#': -2,\n      'p': 1,\n      'pl': 1\n    };\n    var _prepVersion = function _prepVersion(v) {\n      v = ('' + v).replace(/[_\\-+]/g, '.');\n      v = v.replace(/([^.\\d]+)/g, '.$1.').replace(/\\.{2,}/g, '.');\n      return !v.length ? [-8] : v.split('.');\n    };\n    var _numVersion = function _numVersion(v) {\n      return !v ? 0 : isNaN(v) ? vm[v] || -7 : parseInt(v, 10);\n    };\n    v1 = _prepVersion(v1);\n    v2 = _prepVersion(v2);\n    x = Math.max(v1.length, v2.length);\n    for (i = 0; i < x; i++) {\n      if (v1[i] === v2[i]) {\n        continue;\n      }\n      v1[i] = _numVersion(v1[i]);\n      v2[i] = _numVersion(v2[i]);\n      if (v1[i] < v2[i]) {\n        compare = -1;\n        break;\n      } else if (v1[i] > v2[i]) {\n        compare = 1;\n        break;\n      }\n    }\n    if (!operator) {\n      return compare;\n    }\n    switch (operator) {\n      case '>':\n      case 'gt':\n        return compare > 0;\n      case '>=':\n      case 'ge':\n        return compare >= 0;\n      case '<=':\n      case 'le':\n        return compare <= 0;\n      case '===':\n      case '=':\n      case 'eq':\n        return compare === 0;\n      case '<>':\n      case '!==':\n      case 'ne':\n        return compare !== 0;\n      case '':\n      case '<':\n      case 'lt':\n        return compare < 0;\n      default:\n        return null;\n    }\n  };\n}]).service('Alert', ['$timeout', 'Session', function ($timeout, Session) {\n  this.add = function (level, message, non_repeditive) {\n    if (non_repeditive === true) if (this.checkIfExists(message)) return;\n    var type;\n    switch (level) {\n      case \"info\":\n      case 1:\n        type = \"fa fa-info\";\n        break;\n      case \"warning\":\n      case 2:\n        type = \"fa fa-warning\";\n        break;\n      case \"severe\":\n      case 3:\n        type = \"fa fa-times\";\n        break;\n      default:\n        type = \"fa fa-info\";\n        break;\n    }\n    var list = this.get(true);\n    var obj = {\n      type: type,\n      message: message,\n      time: new Date().getTime()\n    };\n    list.unshift(obj);\n    obj.id = list.length;\n    Session.set(\"Alert\", list);\n    //sessionStorage.setItem(\"Alert\", JSON.stringify(list));\n  };\n\n  this.get = function (preserveList) {\n    //var list = JSON.parse(sessionStorage.getItem(\"Alert\"));\n    var list = Session.get(\"Alert\");\n    if (preserveList == undefined) Session.set(\"Alert\", []); //sessionStorage.setItem(\"Alert\", JSON.stringify([])); //Clear after retreival\n    return list != null ? list : [];\n  };\n  this.getCount = function () {\n    return this.get(true).length || 0;\n  };\n  this.checkIfExists = function (message) {\n    var list = this.get(true);\n    if (list.length > 0) {\n      for (var i = 0; i < list.length; i++) {\n        if (list[i].message == message) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n}]).service('Toastr', ['toaster', function (toaster) {\n  this.error = function (title, text) {\n    var options = {\n      type: 'error',\n      title: title,\n      body: text\n    };\n    if (angular.isObject(title)) {\n      angular.merge(options, options, title);\n    }\n    toaster.pop(options);\n  };\n  this.success = function (title, text) {\n    var options = {\n      type: 'success',\n      title: title,\n      body: text\n    };\n    if (angular.isObject(title)) {\n      angular.merge(options, options, title);\n    }\n    toaster.pop(options);\n  };\n}]).config(['$httpProvider', function ($httpProvider) {\n  $httpProvider.interceptors.push(['appConstants', '$q', 'Misc', 'Toastr', '$location', function (appConstants, $q, Misc, Toastr, $location) {\n    var errorCount = 0;\n    return {\n      request: function request(config) {\n        //First check if we can append the version, then if it's an HTML file, and lastly if it's ours!\n        if (ff_version != null && config.url.indexOf('.html') !== -1 && config.url.indexOf('views/') !== -1) {\n          config.url = config.url + '?v=' + ff_version;\n        }\n        return config;\n      },\n      responseError: function responseError(rejection) {\n        if (rejection.config) {\n          //It should always have a config object, but just in case!\n          if (rejection.config.url && rejection.config.url.indexOf(Misc.getServerPath()) < 0) return $q.reject(rejection); //Don't capture non-api requests\n\n          switch (rejection.status) {\n            case -1:\n              fetch(rejection.config.url, {\n                redirect: \"manual\"\n              }).then(function (res) {\n                if (res.type === \"opaqueredirect\") {\n                  // if the request ended in a redirect that failed, then login\n                  login_url = Misc.getServerPath() + 'iaf/';\n                  window.location.href = login_url;\n                }\n              });\n              if (appConstants.init == 1) {\n                if (rejection.config.headers[\"Authorization\"] != undefined) {\n                  console.warn(\"Authorization error\");\n                } else {\n                  Toastr.error(\"Failed to connect to backend!\");\n                }\n              } else if (appConstants.init == 2 && rejection.config.poller) {\n                console.warn(\"Connection to the server was lost!\");\n                errorCount++;\n                if (errorCount == 3) {\n                  Toastr.error({\n                    title: \"Server Error\",\n                    body: \"Connection to the server was lost! Click to refresh the page.\",\n                    timeout: 0,\n                    showCloseButton: true,\n                    clickHandler: function clickHandler(_, isCloseButton) {\n                      if (isCloseButton !== true) {\n                        window.location.reload();\n                      }\n                      return true;\n                    }\n                  });\n                }\n              }\n              break;\n            case 400:\n              Toastr.error(\"Request failed\", \"Bad Request, check the application logs for more information.\");\n              break;\n            case 401:\n              sessionStorage.clear();\n              $location.path(\"login\");\n              break;\n            case 403:\n              Toastr.error(\"Forbidden\", \"You do not have the permissions to complete this operation.\");\n              break;\n            case 500:\n              if (rejection.config.intercept != undefined && rejection.config.intercept === false) return $q.reject(rejection); //Don't capture when explicitly disabled\n              if (rejection.data != null && rejection.data.error != null)\n                //When formatted data is returned, Toast it!\n                Toastr.error(\"Server Error\", rejection.data.error);\n              break;\n          }\n        }\n        // otherwise, default behaviour\n        return $q.reject(rejection);\n      }\n    };\n  }]);\n}]);\n\n//# sourceURL=webpack://gui/./js/services.js?");

/***/ }),

/***/ "./node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./css/animate.css":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./css/animate.css ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"css/animate.687b3d4d5da9141aaba60d9147d78890.css\");\n\n//# sourceURL=webpack://gui/./css/animate.css?./node_modules/file-loader/dist/cjs.js??ruleSet%5B1%5D.rules%5B1%5D.use%5B1%5D!./node_modules/sass-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./css/plugins/iCheck/custom.css":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./css/plugins/iCheck/custom.css ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"css/custom.32b8fb0a9bb37a7d8c40b25e76a6b5b6.css\");\n\n//# sourceURL=webpack://gui/./css/plugins/iCheck/custom.css?./node_modules/file-loader/dist/cjs.js??ruleSet%5B1%5D.rules%5B1%5D.use%5B1%5D!./node_modules/sass-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./css/style.css":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./css/style.css ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"css/style.85d01f5d1b7ba36291073d0680bcf9b5.css\");\n\n//# sourceURL=webpack://gui/./css/style.css?./node_modules/file-loader/dist/cjs.js??ruleSet%5B1%5D.rules%5B1%5D.use%5B1%5D!./node_modules/sass-loader/dist/cjs.js");

/***/ }),

/***/ "./css/animate.css":
/*!*************************!*\
  !*** ./css/animate.css ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_file_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_animate_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !!../node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!../node_modules/sass-loader/dist/cjs.js!./animate.css */ \"./node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./css/animate.css\");\n\n      \n      \n      \n      \n\nvar options = {};\n\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_1___default().bind(null, \"head\");\n    \n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_file_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_animate_css__WEBPACK_IMPORTED_MODULE_2__[\"default\"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});\n\n//# sourceURL=webpack://gui/./css/animate.css?");

/***/ }),

/***/ "./css/plugins/iCheck/custom.css":
/*!***************************************!*\
  !*** ./css/plugins/iCheck/custom.css ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_file_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_custom_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !!../../../node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!../../../node_modules/sass-loader/dist/cjs.js!./custom.css */ \"./node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./css/plugins/iCheck/custom.css\");\n\n      \n      \n      \n      \n\nvar options = {};\n\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_1___default().bind(null, \"head\");\n    \n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_file_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_custom_css__WEBPACK_IMPORTED_MODULE_2__[\"default\"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});\n\n//# sourceURL=webpack://gui/./css/plugins/iCheck/custom.css?");

/***/ }),

/***/ "./css/style.css":
/*!***********************!*\
  !*** ./css/style.css ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_file_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !!../node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!../node_modules/sass-loader/dist/cjs.js!./style.css */ \"./node_modules/file-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./css/style.css\");\n\n      \n      \n      \n      \n\nvar options = {};\n\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_1___default().bind(null, \"head\");\n    \n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_file_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_2__[\"default\"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});\n\n//# sourceURL=webpack://gui/./css/style.css?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl + "../";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkgui"] = self["webpackChunkgui"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors"], () => (__webpack_require__("./index.js")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;